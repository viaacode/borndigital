<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:ftp="http://www.mulesoft.org/schema/mule/ee/ftp"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/ftp http://www.mulesoft.org/schema/mule/ee/ftp/current/mule-ftp-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd">
    <http:request-config name="mimetype2extensionAPI" host="${mime2ext.host}" port="${mime2ext.port}" basePath="/" responseTimeout="30000" doc:name="HTTP Request Configuration"/>
    <sub-flow name="PI_SIP_DELIVERY_VRT">
        <set-variable variableName="eventName" value="PI_SIP_DELIVERY" doc:name="Set Name"/>
        <set-variable variableName="okstatus" value="#[true]" doc:name="Set OKstatus"/>
        <foreach collection="#[flowVars.files]" doc:name="For Each">
            <set-variable variableName="currentItem" value="#[payload]" doc:name="Set currentItem"/>
            <set-variable variableName="sourceFileName" value="#[flowVars.currentItem.file_name]" doc:name="Set sourceFileName"/>
            <set-variable variableName="sourceServer" value="#[flowVars.input.server]" doc:name="Set sourceServer"/>
            <set-variable variableName="sourcePassword" value="#[flowVars.input.password]" doc:name="Set sourcePassword"/>
            <set-variable variableName="sourcePath" value="#[flowVars.currentItem.file_path]" doc:name="Set sourcePath"/>
            <set-variable variableName="sourceUsername" value="#[flowVars.input.username]" doc:name="Set sourceUsername"/>
            <set-variable variableName="correlation_id" value="#[flowVars.currentItem.correlation_id]" doc:name="Set correlation_id"/>
            <choice doc:name="Choice">
                <when expression="#[!payload.file_type.equals(&quot;sidecar&quot;)]">
                    <set-variable variableName="extension" value="#[payload.file_name.split(&quot;\\.(?=[^\\.]+$)&quot;)[1]]" doc:name="Set extension"/>
                    <set-payload value="#[&quot;&quot;]" doc:name="Set Payload"/>
                    <flow-ref name="while_free_space" doc:name="while_free_space"/>
                    
                    <dw:transform-message doc:name="Transform Message">
                        <dw:input-variable variableName="currentItem"/>
                        <dw:set-payload><![CDATA[%dw 1.0
%input payload application/java
%output application/json
---
{
	"destination_file": flowVars.pid ++ '.' ++ flowVars.extension,
    "destination_host": p('ftpDestination.vrt.host'),
    "destination_password": p('ftpDestination.vrt.password'),
    "destination_path": p('ftpDestination.vrt.path'),
    "destination_user": p('ftpDestination.vrt.username'),
    "source_file": flowVars.sourceFileName,
    "source_host": flowVars.sourceServer,
    "source_password": flowVars.sourcePassword,
    "source_path": flowVars.sourcePath,
    "source_user": flowVars.sourceUsername,
    "move": true
}]]></dw:set-payload>
                    </dw:transform-message>
                    <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                    <amqp:outbound-endpoint queueName="fxp_requests" responseTimeout="10000"  connector-ref="RabbitMQConnectorFXP" doc:name="Send message to fxp_requests">
                        <reconnect-forever/>
                    </amqp:outbound-endpoint>
                    <!-- 
                    <invoke object-ref="requestTransformer" method="Transform" methodArguments="#[payload], #[flowVars.pid], ${ftpDestination.path}, #[flowVars.input.cp_name]" doc:name="Invoke"/>
                    <set-variable variableName="temppath" value="#[payload.destinationPath + payload.destination_file]" doc:name="Set file path"/>
                    <set-variable variableName="locationPath" value="#[payload.destinationPath]" doc:name="Set location path"/>
                    <json:object-to-json-transformer doc:name="Object to JSON"/>
                    -->
                </when>
                <otherwise>
                    <logger message="Deleting sidecar" level="INFO" doc:name="Log deletion of sidecar"/>
                    <dw:transform-message doc:name="Build delete request">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"file_name": flowVars.sourceFileName,
	"file_path": flowVars.sourcePath,
    "host": p('ftpDestination.vrt.host'),
    "username": p('ftpDestination.vrt.username'),
    "password": p('ftpDestination.vrt.password'),
    "correlation_id": flowVars.correlation_id
}]]></dw:set-payload>
                    </dw:transform-message>
                    <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                    <amqp:outbound-endpoint queueName="delete_requests" responseTimeout="10000" doc:name="Send message to delete_requests" connector-ref="RabbitMQConnectorDelete">
                        <reconnect-forever/>
                    </amqp:outbound-endpoint>
                </otherwise>
            </choice>
        </foreach>
        <set-payload value="#[flowVars.mappedXml]" doc:name="Set Payload"/>
        <flow-ref name="SidecarFTPVRT" doc:name="SidecarFTPVRT"/>
        <flow-ref name="SetResultAndCommentFXP" doc:name="SetResultAndCommentFXP"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <sub-flow name="PI_SIP_DELIVERY_RMM">
        <set-variable variableName="eventName" value="PI_SIP_DELIVERY" doc:name="Set Name"/>
        <set-variable variableName="okstatus" value="#[true]" doc:name="Set OKstatus"/>
        <foreach collection="#[flowVars.files]" doc:name="For Each">
            <choice doc:name="Choice">
                <when expression="#[!payload.file_type.equals(&quot;sidecar&quot;)]">
                    <set-variable variableName="currentItem" value="#[payload]" doc:name="Set currentItem"/>
                    <set-variable variableName="sourceFileName" value="#[flowVars.currentItem.file_name]" doc:name="Set sourceFileName"/>
                    <set-variable variableName="sourceServer" value="#[flowVars.input.server]" doc:name="Set sourceServer"/>
                    <set-variable variableName="sourcePassword" value="#[flowVars.input.password]" doc:name="Set sourcePassword"/>
                    <set-variable variableName="sourcePath" value="#[flowVars.currentItem.file_path]" doc:name="Set sourcePath"/>
                    <set-variable variableName="sourceUsername" value="#[flowVars.input.username]" doc:name="Set sourceUsername"/>
                    <set-variable variableName="extension" value="#[payload.file_name.split(&quot;\\.(?=[^\\.]+$)&quot;)[1]]" doc:name="Set extension"/>
                    <set-payload value="#[&quot;&quot;]" doc:name="Set Payload"/>
                    <flow-ref name="while_free_space" doc:name="while_free_space"/>
                    <dw:transform-message doc:name="Transform Message">
                        <dw:input-variable variableName="currentItem"/>
                        <dw:set-payload><![CDATA[%dw 1.0
%input payload application/java
%output application/json
---
{
	"destination_file": flowVars.pid ++ '.' ++ flowVars.extension,
    "destination_host": p('ftpDestination.rmm.host'),
    "destination_password": p('ftpDestination.rmm.password'),
    "destination_path": p('ftpDestination.rmm.path'),
    "destination_user": p('ftpDestination.rmm.username'),
    "source_file": flowVars.sourceFileName,
    "source_host": flowVars.sourceServer,
    "source_password": flowVars.sourcePassword,
    "source_path": flowVars.sourcePath,
    "source_user": flowVars.sourceUsername
}]]></dw:set-payload>
                    </dw:transform-message>
                    <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                  	<amqp:outbound-endpoint queueName="fxp_requests" responseTimeout="10000" exchange-pattern="request-response" connector-ref="RabbitMQConnectorFXP" doc:name="Send message to fxp_requests"/>
                </when>
                <otherwise>
                    <logger message="Deleting sidecar" level="INFO" doc:name="Log deletion of sidecar"/>
                </otherwise>
            </choice>
        </foreach>
        <set-payload value="#[flowVars.mappedXml]" doc:name="Set Payload"/>
        <flow-ref name="SidecarFTPRMM" doc:name="SidecarFTPRMM"/>
        <flow-ref name="SetResultAndCommentFXP" doc:name="SetResultAndCommentFXP"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <sub-flow name="PI_SIP_DELIVERY_PROVANT">
        <set-variable variableName="eventName" value="PI_SIP_DELIVERY" doc:name="Set Name"/>
        <set-variable variableName="okstatus" value="#[true]" doc:name="Set OKstatus"/>
        <choice doc:name="APA | FOMU | MOMU | museumedelsmeedkunstjuwelenendiamant ?">
            <when expression="#[flowVars.CP.equals(&quot;apa&quot;)]">
                <set-variable variableName="destinationPath" value="#[&quot;/apa&quot; + &quot;/TAPE-SHARE-EVENTS&quot;]" doc:name="Set destinationPath"/>
            </when>
            <when expression="#[flowVars.CP.equals(&quot;fomu&quot;)]">
                <set-variable variableName="destinationPath" value="#[&quot;/fomu&quot; + &quot;/TAPE-SHARE-EVENTS&quot;]" doc:name="Set destinationPath"/>
            </when>
            <when expression="#[flowVars.CP.equals(&quot;momu&quot;)]">
                <set-variable variableName="destinationPath" value="#[&quot;/momu&quot; + &quot;/TAPE-SHARE-EVENTS&quot;]" doc:name="Set destinationPath"/>
            </when>
            <when expression="#[flowVars.CP.equals(&quot;museumedelsmeedkunstjuwelenendiamant&quot;)]">
                <set-variable variableName="destinationPath" value="#[&quot;/museumedelsmeedkunstjuwelenendiamant&quot; + &quot;/TAPE-SHARE-EVENTS&quot;]" doc:name="Set destinationPath"/>
            </when>
            <otherwise>
				<message-filter throwOnUnaccepted="true" doc:name="Error if destinationPath is null">
                        <and-filter>
                            <expression-filter expression="#[flowVars.comment = &quot;CP was invalid. No destination folder known.&quot;]"/>
                            <expression-filter expression="#[payload.destinationPath != null]"/>
                        </and-filter>
                    </message-filter>
            </otherwise>
        </choice>
        <foreach collection="#[flowVars.files]" doc:name="For Each">
            <choice doc:name="Choice">
                <when expression="#[!payload.file_type.equals(&quot;sidecar&quot;)]">
                    <set-variable variableName="currentItem" value="#[payload]" doc:name="Set currentItem"/>
                    <set-variable variableName="sourceFileName" value="#[flowVars.currentItem.file_name]" doc:name="Set sourceFileName"/>
                    <set-variable variableName="sourceServer" value="#[flowVars.input.server]" doc:name="Set sourceServer"/>
                    <set-variable variableName="sourcePassword" value="#[flowVars.input.password]" doc:name="Set sourcePassword"/>
                    <set-variable variableName="sourcePath" value="#[flowVars.currentItem.file_path]" doc:name="Set sourcePath"/>
                    <set-variable variableName="sourceUsername" value="#[flowVars.input.username]" doc:name="Set sourceUsername"/>
                    <set-variable variableName="mime_type" value="#[xpath3('//original/*[local-name()=&quot;content&quot;]/*[local-name()=&quot;mimeType&quot;]', flowVars.incomingXml)]" doc:name="Set mime_type from metadata"/>
                    <http:request config-ref="mimetype2extensionAPI" path="/api/extension" method="GET" doc:name="Get extension">
                        <http:request-builder>
                            <http:query-param paramName="mimetype" value="#[flowVars.mime_type]"/>
                        </http:request-builder>
                    </http:request>
                    <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
                    <choice doc:name="Status == success?">
                        <when expression="#[payload.status != &quot;success&quot;]">
                            <logger message="Extension not found." level="INFO" doc:name="Extension not found."/>
                            <set-variable variableName="extension" value="#[&quot;&quot;]" doc:name="Set extension empty"/>
                        </when>
                        <otherwise>
                            <set-variable variableName="extension" value="#[payload['data'].extension]" doc:name="Set extension"/>
                        </otherwise>
                    </choice>
                    <set-payload value="#[&quot;&quot;]" doc:name="Set Payload"/>
                    <flow-ref name="while_free_space" doc:name="while_free_space"/>
                    <dw:transform-message doc:name="Transform Message">
                        <dw:input-variable variableName="currentItem"/>
                        <dw:set-payload><![CDATA[%dw 1.0
%input payload application/java
%output application/json
---
{
	"destination_file": flowVars.pid ++ flowVars.extension,
    "destination_host": p('ftpDestination.provant.host'),
    "destination_password": p('ftpDestination.provant.password'),
    "destination_path": flowVars.destinationPath,
    "destination_user": p('ftpDestination.provant.username'),
    "source_file": flowVars.sourceFileName,
    "source_host": flowVars.sourceServer,
    "source_password": flowVars.sourcePassword,
    "source_path": flowVars.sourcePath,
    "source_user": flowVars.sourceUsername
}]]></dw:set-payload>
                    </dw:transform-message>
                    <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                    <amqp:outbound-endpoint queueName="fxp_requests" responseTimeout="10000"  connector-ref="RabbitMQConnectorFXP" doc:name="Send message to fxp_requests"/>
                </when>
                <otherwise>
                    <logger message="Deleting sidecar" level="INFO" doc:name="Log deletion of sidecar"/>
                </otherwise>
            </choice>
        </foreach>
        <set-payload value="#[flowVars.mappedXml]" doc:name="Set Payload"/>
        <flow-ref name="SidecarFTPProvant" doc:name="SidecarFTPProvant"/>
        <flow-ref name="SetResultAndCommentFXP" doc:name="Flow Reference"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <sub-flow name="PI_SIP_DELIVERY_MEISE">
        <set-variable variableName="eventName" value="PI_SIP_DELIVERY" doc:name="Set Name"/>
        <set-variable variableName="okstatus" value="#[true]" doc:name="Set OKstatus"/>
        <foreach collection="#[flowVars.files]" doc:name="For Each">
            <choice doc:name="Is sidecar?">
                <when expression="#[!payload.file_type.equals(&quot;sidecar&quot;)]">
                    <set-variable variableName="currentItem" value="#[payload]" doc:name="Set currentItem"/>
                    <set-variable variableName="sourceFileName" value="#[flowVars.currentItem.file_name]" doc:name="Set sourceFileName"/>
                    <set-variable variableName="sourceServer" value="#[flowVars.input.server]" doc:name="Set sourceServer"/>
                    <set-variable variableName="sourcePassword" value="#[flowVars.input.password]" doc:name="Set sourcePassword"/>
                    <set-variable variableName="sourcePath" value="#[flowVars.currentItem.file_path]" doc:name="Set sourcePath"/>
                    <set-variable variableName="sourceUsername" value="#[flowVars.input.username]" doc:name="Set sourceUsername"/>
                    <set-variable variableName="extension" value="#[payload.file_name.split(&quot;\\.(?=[^\\.]+$)&quot;)[1]]" doc:name="Set extension"/>
                    <set-payload value="#[&quot;&quot;]" doc:name="Set Payload"/>
                    <flow-ref name="while_free_space" doc:name="while_free_space"/>
                    <logger message="Continuing transfer after while loops" level="INFO" doc:name="Logger"/>
                    <dw:transform-message metadata:id="949d2f2e-d628-4465-b179-e235da46f674" doc:name="Build FXP requests (move: false)">
                        <dw:input-variable variableName="currentItem"/>
                        <dw:input-variable doc:sample="double.dwl" variableName="extension"/>
                        <dw:input-variable doc:sample="string.dwl" variableName="pid"/>
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"destination_file": flowVars.pid ++ '.' ++ flowVars.extension,
    "destination_host": p('ftpDestination.meise.host'),
    "destination_password": p('ftpDestination.meise.password'),
    "destination_path": p('ftpDestination.meise.path'),
    "destination_user": p('ftpDestination.meise.username'),
    "source_file": flowVars.sourceFileName,
    "source_host": flowVars.sourceServer,
    "source_password": flowVars.sourcePassword,
    "source_path": flowVars.sourcePath,
    "source_user": flowVars.sourceUsername,
    "move": false
}]]></dw:set-payload>
                    </dw:transform-message>
                    <object-to-string-transformer doc:name="Object to String"/>
                    <amqp:outbound-endpoint queueName="fxp_requests" responseTimeout="10000"  connector-ref="RabbitMQConnectorFXP" doc:name="Send message to fxp_requests"/>
                </when>
                <otherwise>
                    <logger message="Deleting sidecar" level="INFO" doc:name="Log deletion of sidecar"/>
                </otherwise>
            </choice>
        </foreach>
        <set-payload value="#[flowVars.mappedXml]" doc:name="Set Payload"/>
        <flow-ref name="SidecarFTPMeise" doc:name="SidecarFTPMeise"/>
        <logger message="Success FTP" level="INFO" doc:name="Success FTP"/>
        <flow-ref name="SetResultAndCommentFXP" doc:name="SetResultAndCommentFXP"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <flow name="while_free_space" processingStrategy="synchronous">
    	<http:request config-ref="Sensor_API_Configuration" path="${sensor.path}" method="GET"  doc:name="HTTP sensor">
            <http:request-builder>
                <http:query-param paramName="content" value="channels"/>
                <http:query-param paramName="output" value="xml"/>
                <http:query-param paramName="columns" value="name,lastvalue_"/>
                <http:query-param paramName="id" value="${sensor.id}"/>
                <http:query-param paramName="username" value="${sensor.username}"/>
                <http:query-param paramName="password" value="${sensor.password}"/>
            </http:request-builder>
        </http:request>
        <until-successful maxRetries="999999999" synchronous="true" doc:name="Until Successful">
            <flow-ref name="while_free_space_sub" doc:name="while_free_space_sub"/>
        </until-successful>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="No sensor found. Proceeding" level="WARN" doc:name="Logger"/>
        </catch-exception-strategy>
    </flow>
    <sub-flow name="SetResultAndCommentFXP">
        <set-variable variableName="result" value="#['OK']" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="#[&quot;Message has been sent to fxp_requests.\n XML written:&quot; + flowVars.pid + &quot;.xml&quot;]" doc:name="Set Comment"/>
    </sub-flow>
    <sub-flow name="while_free_space_sub">
        <logger message="Checking free space" level="INFO" doc:name="Logger"/>
        <http:request config-ref="Sensor_API_Configuration" path="${sensor.path}" method="GET"  doc:name="HTTP sensor">
            <http:request-builder>
                <http:query-param paramName="output" value="xml"/>
                <http:query-param paramName="id" value="${sensor.id}"/>
                <http:query-param paramName="username" value="${sensor.username}"/>
                <http:query-param paramName="password" value="${sensor.password}"/>
                <http:query-param paramName="content" value="channels"/>
                <http:query-param paramName="columns" value="name,lastvalue_"/>
            </http:request-builder>
        </http:request>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="freepercentage" value="#[java.lang.Integer.parseInt(xpath3(&quot;//channels/item[name='pctfree']/lastvalue/text()&quot;).split(' %')[0])]" doc:name="Set freepercentage"/>
        <logger message="#[&quot;Free percentage: &quot; + flowVars.freepercentage + &quot; %&quot;]" level="INFO" doc:name="Logger"/>
        <message-filter throwOnUnaccepted="true" doc:name="Message">
            <expression-filter expression="#[flowVars.freepercentage &gt; '${sensor.minfreepercentage}']"/>
        </message-filter>
    </sub-flow>
    <flow name="SidecarFTPMeise" processingStrategy="synchronous">
        <logger message="Start FTP meise" level="INFO" doc:name="Start FTP meise"/>
        <ftp:outbound-endpoint host="${ftpDestination.meise.host}" port="21" path="${ftpDestination.meise.path}" user="${ftpDestination.meise.username}" password="${ftpDestination.vrt.password}"  connector-ref="FTP" outputPattern="#[flowVars.pid + &quot;.xml&quot;]" responseTimeout="1000000" doc:name="FTP">
            <reconnect-forever frequency="3000"/>
        </ftp:outbound-endpoint>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message=" Failed to FTP for Meise" level="WARN" doc:name="Logger"/>
            <expression-component doc:name="Sleep"><![CDATA[Thread.sleep(2000);]]></expression-component>
            <flow-ref name="SidecarFTPMeise" doc:name="SidecarFTPMeise"/>
        </catch-exception-strategy>
    </flow>
    <flow name="SidecarFTPProvant" processingStrategy="synchronous">
        <ftp:outbound-endpoint host="${ftpDestination.provant.host}" port="21" path="#[flowVars.destinationPath]" user="${ftpDestination.provant.username}" password="${ftpDestination.provant.password}"  connector-ref="FTP" outputPattern="#[flowVars.pid + &quot;.xml&quot;]" responseTimeout="1000000" doc:name="FTP"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="FTP Timeout for sidecar! Retrying" level="INFO" doc:name="Logger"/>
            <expression-component doc:name="Sleep"><![CDATA[Thread.sleep(2000);]]></expression-component>
            <flow-ref name="SidecarFTPProvant" doc:name="SidecarFTPProvant"/>
        </catch-exception-strategy>
    </flow>
    <flow name="SidecarFTPVRT" processingStrategy="synchronous">
        <ftp:outbound-endpoint host="${ftpDestination.vrt.host}" port="21" path="${ftpDestination.vrt.path}" user="${ftpDestination.vrt.username}" password="${ftpDestination.vrt.password}"  connector-ref="FTP" outputPattern="#[flowVars.pid + &quot;.xml&quot;]" responseTimeout="1000000" doc:name="FTP"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="FTP Timeout for sidecar! Retrying" level="INFO" doc:name="Logger"/>
            <expression-component doc:name="Sleep"><![CDATA[Thread.sleep(2000);]]></expression-component>
            <flow-ref name="SidecarFTPVRT" doc:name="SidecarFTPVRT"/>
        </catch-exception-strategy>
    </flow>
    <flow name="SidecarFTPRMM" processingStrategy="synchronous">
        <ftp:outbound-endpoint host="${ftpDestination.rmm.host}" port="21" path="${ftpDestination.rmm.path}" user="${ftpDestination.rmm.username}" password="${ftpDestination.rmm.password}"  connector-ref="FTP" outputPattern="#[flowVars.pid + &quot;.xml&quot;]" responseTimeout="1000000" doc:name="FTP"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="FTP Timeout for sidecar! Retrying" level="INFO" doc:name="Logger"/>
            <expression-component doc:name="Sleep"><![CDATA[Thread.sleep(2000);]]></expression-component>
            <flow-ref name="SidecarFTPRMM" doc:name="SidecarFTPRMM"/>
        </catch-exception-strategy>
    </flow>
</mule>
