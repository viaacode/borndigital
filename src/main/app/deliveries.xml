<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tls="http://www.mulesoft.org/schema/mule/tls"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:ftp="http://www.mulesoft.org/schema/mule/ee/ftp"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/ftp http://www.mulesoft.org/schema/mule/ee/ftp/current/mule-ftp-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
    <http:request-config name="mimetype2extensionAPI" host="${mime2ext.host}" port="${mime2ext.port}" basePath="/" responseTimeout="30000" doc:name="HTTP Request Configuration"/>
    <http:request-config name="Mediahaven" host="${mediahaven_api.host_intern}" port="443" basePath="/mediahaven-rest-api/resources" doc:name="HTTP Request Configuration" responseTimeout="30000" protocol="HTTPS">
        <tls:context>
            <tls:key-store alias="${keystore.alias}" keyPassword="${keystore.password}" password="${keystore.password}"/>
        </tls:context>
    </http:request-config>
    <http:request-config name="Update_fragments" host="${mediahaven_api.host_intern}" port="443" basePath="/" doc:name="HTTP Request Configuration" responseTimeout="30000" protocol="HTTPS">
        <tls:context>
            <tls:key-store alias="${keystore.alias}" keyPassword="${keystore.password}" password="${keystore.password}"/>
        </tls:context>
    </http:request-config>
    <sub-flow name="PI_SIP_DELIVERY_VRT">
        <set-variable variableName="eventName" value="PI_SIP_DELIVERY" doc:name="Set Name"/>
        <set-variable variableName="okstatus" value="#[true]" doc:name="Set OKstatus"/>
        <foreach collection="#[flowVars.files.entrySet()]" doc:name="For Each">
            <choice doc:name="Choice">
                <when expression="#[!payload.key.equals(&quot;sidecar&quot;)]">
                    <flow-ref name="while_free_space" doc:name="while_free_space"/>
                    <choice doc:name="When manual or redelivery of tape, check AR for destination path">
                        <when expression="#[flowVars.origin == 'manual' || flowVars.originallocation != null]">
                            <logger message="#[flowVars.local_id] is manual request or tape redelivery" level="INFO" doc:name="manual request or tape redelivery"/>
                            <flow-ref name="RetrieveAspectRatio" doc:name="RetrieveAspectRatio"/>
                        </when>
                        <otherwise>
                            <logger message="#[flowVars.local_id] is dailies" level="INFO" doc:name="Dailies"/>
                        </otherwise>
                    </choice>
                    <set-payload value="#[&quot;&quot;]" doc:name="Set Payload empty"/>
                    
                    <dw:transform-message doc:name="Transform Message">
                        <dw:input-variable variableName="currentItem"/>
                        <dw:set-payload><![CDATA[%dw 1.0
%input payload application/java
%output application/json
---
{
	"destination_file": flowVars.pid ++ '.' ++ flowVars.extension,
    "destination_host": p('ftpDestination.vrt.host'),
    "destination_password": p('ftpDestination.vrt.password'),
    "destination_path": (p('ftpDestination.vrt.path') ++ flowVars.arAddition ++ flowVars.cropAddition) when (flowVars.origin != "vrt" or flowVars.originallocation != null) 
    				otherwise p('ftpDestination.vrt.path'),
    "destination_user": p('ftpDestination.vrt.username'),
    "source_file": flowVars.filenameEssence,
    "source_host": flowVars.host,
    "source_password": flowVars.sourcePassword,
    "source_path": flowVars.filepath,
    "source_user": flowVars.sourceUsername,
    "move": true
}]]></dw:set-payload>
                    </dw:transform-message>
                    <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                    <amqp:outbound-endpoint queueName="fxp_requests" responseTimeout="10000"  connector-ref="RabbitMQConnectorFXPPriority" doc:name="Send message to fxp_requests">
                        <reconnect-forever/>
                    </amqp:outbound-endpoint>
                    <!-- 
                    <invoke object-ref="requestTransformer" method="Transform" methodArguments="#[payload], #[flowVars.pid], ${ftpDestination.path}, #[flowVars.input.cp_name]" doc:name="Invoke"/>
                    <set-variable variableName="temppath" value="#[payload.destinationPath + payload.destination_file]" doc:name="Set file path"/>
                    <set-variable variableName="locationPath" value="#[payload.destinationPath]" doc:name="Set location path"/>
                    <json:object-to-json-transformer doc:name="Object to JSON"/>
                    -->
                </when>
                <otherwise>
                    <logger message="Deleting sidecar" level="INFO" doc:name="Log deletion of sidecar"/>
                    <dw:transform-message doc:name="Build delete request">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"file_name": flowVars.filenameWithoutExtension ++ ".xml",
	"file_path": flowVars.filepath,
    "host": flowVars.host,
    "username": flowVars.sourceUsername,
    "password": flowVars.sourcePassword,
    "correlation_id": flowVars.correlation_id
}]]></dw:set-payload>
                    </dw:transform-message>
                    <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                    <amqp:outbound-endpoint queueName="delete_requests" responseTimeout="10000" doc:name="Send message to delete_requests" connector-ref="RabbitMQConnectorDelete">
                        <reconnect-forever/>
                    </amqp:outbound-endpoint>
                </otherwise>
            </choice>
        </foreach>
        <set-payload value="#[flowVars.mappedXml]" doc:name="Set Payload"/>
        <flow-ref name="SidecarFTPVRT" doc:name="SidecarFTPVRT"/>
        <flow-ref name="SetResultAndCommentFXP" doc:name="SetResultAndCommentFXP"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <sub-flow name="PI_SIP_DELIVERY_GENERIC_ESSENCE">
        <set-variable variableName="eventName" value="PI_SIP_DELIVERY" doc:name="Set Name"/>
        <set-variable variableName="okstatus" value="#[true]" doc:name="Set OKstatus"/>
        <set-variable variableName="destinationPath" value="#[&quot;/&quot; + flowVars.cp.toLowerCase() + &quot;/TAPE-SHARE-EVENTS&quot;]" doc:name="Set destinationPath to /CP(lowercase)/TAPE-SHARE-EVENTS"/>
        <flow-ref name="while_free_space" doc:name="while_free_space"/>
        <dw:transform-message doc:name="Build fxp request">
            <dw:input-variable variableName="currentItem"/>
            <dw:set-payload><![CDATA[%dw 1.0
%input payload application/java
%output application/json
---
{
	"destination_file": flowVars.pid ++ '.' ++ flowVars.extension,
    "destination_host": p('ftpDestinationSidecar.host'),
    "destination_password": p('ftpDestinationSidecar.password'),
    "destination_path": flowVars.destinationPath,
    "destination_user": p('ftpDestinationSidecar.username'),
    "source_file": flowVars.filenameEssence,
    "source_host": flowVars.host,
    "source_password": flowVars.sourcePassword,
    "source_path": flowVars.filepath,
    "source_user": flowVars.sourceUsername,
    "move": false
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <amqp:outbound-endpoint queueName="fxp_requests" responseTimeout="10000" exchange-pattern="request-response" connector-ref="RabbitMQConnectorFXP" doc:name="Send message to fxp_requests"/>
        <flow-ref name="SetResultAndCommentFXP" doc:name="SetResultAndCommentFXP"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <sub-flow name="PI_SIP_DELIVERY_GENERIC_SIDECAR">
        <set-payload value="#[flowVars.mappedXml]" doc:name="Set Payload with mappedXml"/>
        <flow-ref name="SidecarFTPGeneric" doc:name="SidecarFTPGeneric"/>
    </sub-flow>
    <sub-flow name="PI_SIP_DELIVERY_PROVANT">
        <set-variable variableName="eventName" value="PI_SIP_DELIVERY" doc:name="Set Name"/>
        <set-variable variableName="okstatus" value="#[true]" doc:name="Set OKstatus"/>
        <choice doc:name="APA | FOMU | MOMU | museumedelsmeedkunstjuwelenendiamant ?">
            <when expression="#[flowVars.cp.equals(&quot;FoMu&quot;)]">
                <set-variable variableName="destinationPath" value="#[&quot;/fomu&quot; + &quot;/TAPE-SHARE-EVENTS&quot;]" doc:name="Set destinationPath"/>
            </when>
            <when expression="#[flowVars.cp.equals(&quot;MoMu&quot;)]">
                <set-variable variableName="destinationPath" value="#[&quot;/momu&quot; + &quot;/TAPE-SHARE-EVENTS&quot;]" doc:name="Set destinationPath"/>
            </when>
            <when expression="#[flowVars.cp.equals(&quot;Museum Edelsmeedkunst, Juwelen en Diamant&quot;)]">
                <set-variable variableName="destinationPath" value="#[&quot;/museumedelsmeedkunstjuwelenendiamant&quot; + &quot;/TAPE-SHARE-EVENTS&quot;]" doc:name="Set destinationPath"/>
            </when>
            <otherwise>
				<message-filter throwOnUnaccepted="true" doc:name="Error if destinationPath is null">
                    <and-filter>
                        <expression-filter expression="#[payload.destinationPath != null]"/>
                        <expression-filter expression="#[flowVars.comment = &quot;CP was invalid (&quot; + flowVars.CP + &quot;). No destination folder known.&quot;]"/>
                    </and-filter>
                    </message-filter>
            </otherwise>
        </choice>
        <foreach collection="#[flowVars.files]" doc:name="For Each">
            <choice doc:name="Choice">
                <when expression="#[!payload.file_type.equals(&quot;sidecar&quot;)]">
                    <set-variable variableName="currentItem" value="#[payload]" doc:name="Set currentItem"/>
                    <set-variable variableName="sourceFileName" value="#[flowVars.currentItem.file_name]" doc:name="Set sourceFileName"/>
                    <set-variable variableName="sourceServer" value="#[flowVars.input.server]" doc:name="Set sourceServer"/>
                    <set-variable variableName="sourcePassword" value="#[flowVars.input.password]" doc:name="Set sourcePassword"/>
                    <set-variable variableName="sourcePath" value="#[flowVars.currentItem.file_path]" doc:name="Set sourcePath"/>
                    <set-variable variableName="sourceUsername" value="#[flowVars.input.username]" doc:name="Set sourceUsername"/>
                    <set-variable variableName="mime_type" value="#[xpath3('//original/*[local-name()=&quot;content&quot;]/*[local-name()=&quot;mimeType&quot;]', flowVars.incomingXml)]" doc:name="Set mime_type from metadata"/>
                    <http:request config-ref="mimetype2extensionAPI" path="/api/extension" method="GET" doc:name="Get extension">
                        <http:request-builder>
                            <http:query-param paramName="mimetype" value="#[flowVars.mime_type]"/>
                        </http:request-builder>
                    </http:request>
                    <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
                    <choice doc:name="Status == success?">
                        <when expression="#[payload.status != &quot;success&quot;]">
                            <logger message="Extension not found." level="INFO" doc:name="Extension not found."/>
                            <set-variable variableName="extension" value="#[&quot;&quot;]" doc:name="Set extension empty"/>
                        </when>
                        <otherwise>
                            <set-variable variableName="extension" value="#[payload['data'].extension]" doc:name="Set extension"/>
                        </otherwise>
                    </choice>
                    <set-payload value="#[&quot;&quot;]" doc:name="Set Payload"/>
                    <flow-ref name="while_free_space" doc:name="while_free_space"/>
                    <dw:transform-message doc:name="Transform Message">
                        <dw:input-variable variableName="currentItem"/>
                        <dw:set-payload><![CDATA[%dw 1.0
%input payload application/java
%output application/json
---
{
	"destination_file": flowVars.pid ++ flowVars.extension,
    "destination_host": p('ftpDestination.provant.host'),
    "destination_password": p('ftpDestination.provant.password'),
    "destination_path": flowVars.destinationPath,
    "destination_user": p('ftpDestination.provant.username'),
    "source_file": flowVars.sourceFileName,
    "source_host": flowVars.sourceServer,
    "source_password": flowVars.sourcePassword,
    "source_path": flowVars.sourcePath,
    "source_user": flowVars.sourceUsername
}]]></dw:set-payload>
                    </dw:transform-message>
                    <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                    <amqp:outbound-endpoint queueName="fxp_requests" responseTimeout="10000"  connector-ref="RabbitMQConnectorFXP" doc:name="Send message to fxp_requests"/>
                </when>
                <otherwise>
                    <logger message="Deleting sidecar" level="INFO" doc:name="Log deletion of sidecar"/>
                </otherwise>
            </choice>
        </foreach>
        <set-payload value="#[flowVars.mappedXml]" doc:name="Set Payload"/>
        <flow-ref name="SidecarFTPProvant" doc:name="SidecarFTPProvant"/>
        <flow-ref name="SetResultAndCommentFXP" doc:name="Flow Reference"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <sub-flow name="PI_SIP_DELIVERY_MEISE">
        <set-variable variableName="eventName" value="PI_SIP_DELIVERY" doc:name="Set Name"/>
        <set-variable variableName="okstatus" value="#[true]" doc:name="Set OKstatus"/>
        <foreach collection="#[flowVars.files]" doc:name="For Each">
            <choice doc:name="Is sidecar?">
                <when expression="#[!payload[0].file_type.equals(&quot;sidecar&quot;)]">
                    <set-variable variableName="currentItem" value="#[payload[0]]" doc:name="Set currentItem"/>
                    <set-variable variableName="sourceFileName" value="#[flowVars.currentItem.file_name]" doc:name="Set sourceFileName"/>
                    <set-variable variableName="sourceServer" value="#[flowVars.input.server]" doc:name="Set sourceServer"/>
                    <set-variable variableName="sourcePassword" value="#[flowVars.input.password]" doc:name="Set sourcePassword"/>
                    <set-variable variableName="sourcePath" value="#[flowVars.currentItem.file_path]" doc:name="Set sourcePath"/>
                    <set-variable variableName="sourceUsername" value="#[flowVars.input.username]" doc:name="Set sourceUsername"/>
                    <set-variable variableName="extension" value="#[flowVars.currentItem.file_name.split(&quot;\\.(?=[^\\.]+$)&quot;)[1]]" doc:name="Set extension"/>
                    <set-payload value="#[&quot;&quot;]" doc:name="Set Payload"/>
                    <flow-ref name="while_free_space" doc:name="while_free_space"/>
                    <logger message="Continuing transfer after while loops" level="INFO" doc:name="Logger"/>
                    <dw:transform-message metadata:id="949d2f2e-d628-4465-b179-e235da46f674" doc:name="Build FXP requests (move: false)">
                        <dw:input-variable variableName="currentItem"/>
                        <dw:input-variable doc:sample="double.dwl" variableName="extension"/>
                        <dw:input-variable doc:sample="string.dwl" variableName="pid"/>
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"destination_file": flowVars.pid ++ '.' ++ flowVars.extension,
    "destination_host": p('ftpDestination.meise.host'),
    "destination_password": p('ftpDestination.meise.password'),
    "destination_path": p('ftpDestination.meise.path'),
    "destination_user": p('ftpDestination.meise.username'),
    "source_file": flowVars.sourceFileName,
    "source_host": flowVars.sourceServer,
    "source_password": flowVars.sourcePassword,
    "source_path": flowVars.sourcePath,
    "source_user": flowVars.sourceUsername,
    "move": false
}]]></dw:set-payload>
                    </dw:transform-message>
                    <object-to-string-transformer doc:name="Object to String"/>
                    <amqp:outbound-endpoint queueName="fxp_requests" responseTimeout="10000"  connector-ref="RabbitMQConnectorFXP" doc:name="Send message to fxp_requests"/>
                </when>
                <otherwise>
                    <logger message="Deleting sidecar" level="INFO" doc:name="Log deletion of sidecar"/>
                </otherwise>
            </choice>
        </foreach>
        <set-payload value="#[flowVars.mappedXml]" doc:name="Set Payload"/>
        <flow-ref name="SidecarFTPMeise" doc:name="SidecarFTPMeise"/>
        <logger message="Success FTP" level="INFO" doc:name="Success FTP"/>
        <flow-ref name="SetResultAndCommentFXP" doc:name="SetResultAndCommentFXP"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <flow name="while_free_space" processingStrategy="synchronous">
    	<http:request config-ref="Sensor_API_Configuration" path="${sensor.path}" method="GET"  doc:name="HTTP sensor">
            <http:request-builder>
                <http:query-param paramName="content" value="channels"/>
                <http:query-param paramName="output" value="xml"/>
                <http:query-param paramName="columns" value="name,lastvalue_"/>
                <http:query-param paramName="id" value="${sensor.id}"/>
                <http:query-param paramName="username" value="${sensor.username}"/>
                <http:query-param paramName="password" value="${sensor.password}"/>
            </http:request-builder>
        </http:request>
        <until-successful maxRetries="999999999" synchronous="true" doc:name="Until Successful">
            <flow-ref name="while_free_space_sub" doc:name="while_free_space_sub"/>
        </until-successful>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="No sensor found. Proceeding" level="WARN" doc:name="Logger"/>
        </catch-exception-strategy>
    </flow>
    <sub-flow name="SetResultAndCommentFXP">
        <set-variable variableName="result" value="#['OK']" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="#[&quot;Message has been sent to fxp_requests.&quot;]" doc:name="Set comment"/>
    </sub-flow>
    <sub-flow name="while_free_space_sub">
        <logger message="Checking free space" level="INFO" doc:name="Logger"/>
        <http:request config-ref="Sensor_API_Configuration" path="${sensor.path}" method="GET"  doc:name="HTTP sensor">
            <http:request-builder>
                <http:query-param paramName="output" value="xml"/>
                <http:query-param paramName="id" value="${sensor.id}"/>
                <http:query-param paramName="username" value="${sensor.username}"/>
                <http:query-param paramName="password" value="${sensor.password}"/>
                <http:query-param paramName="content" value="channels"/>
                <http:query-param paramName="columns" value="name,lastvalue_"/>
            </http:request-builder>
        </http:request>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="freepercentage" value="#[java.lang.Integer.parseInt(xpath3(&quot;//channels/item[name='pctfree']/lastvalue/text()&quot;).split(' %')[0])]" doc:name="Set freepercentage"/>
        <logger message="#[&quot;Free percentage: &quot; + flowVars.freepercentage + &quot; %&quot;]" level="INFO" doc:name="Logger"/>
        <message-filter throwOnUnaccepted="true" doc:name="Message">
            <expression-filter expression="#[flowVars.freepercentage &gt; '${sensor.minfreepercentage}']"/>
        </message-filter>
    </sub-flow>
    <flow name="SidecarFTPMeise" processingStrategy="synchronous">
        <logger message="Start FTP meise" level="INFO" doc:name="Start FTP meise"/>
        <ftp:outbound-endpoint host="${ftpDestination.meise.host}" port="21" path="${ftpDestination.meise.path}" user="${ftpDestination.meise.username}" password="${ftpDestination.vrt.password}"  connector-ref="FTP" outputPattern="#[flowVars.pid + &quot;.xml&quot;]" responseTimeout="1000000" doc:name="FTP">
            <reconnect-forever frequency="3000"/>
        </ftp:outbound-endpoint>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message=" Failed to FTP for Meise" level="WARN" doc:name="Logger"/>
            <expression-component doc:name="Sleep"><![CDATA[Thread.sleep(2000);]]></expression-component>
            <flow-ref name="SidecarFTPMeise" doc:name="SidecarFTPMeise"/>
        </catch-exception-strategy>
    </flow>
    <flow name="SidecarFTPProvant" processingStrategy="synchronous">
        <ftp:outbound-endpoint host="${ftpDestination.provant.host}" port="21" path="#[flowVars.destinationPath]" user="${ftpDestination.provant.username}" password="${ftpDestination.provant.password}"  connector-ref="FTP" outputPattern="#[flowVars.pid + &quot;.xml&quot;]" responseTimeout="1000000" doc:name="FTP"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="FTP Timeout for sidecar! Retrying" level="INFO" doc:name="Logger"/>
            <expression-component doc:name="Sleep"><![CDATA[Thread.sleep(2000);]]></expression-component>
            <flow-ref name="SidecarFTPProvant" doc:name="SidecarFTPProvant"/>
        </catch-exception-strategy>
    </flow>
    <flow name="SidecarFTPVRT" processingStrategy="synchronous">
        <ftp:outbound-endpoint host="${ftpDestination.vrt.host}" port="21" path="#[flowVars.origin != &quot;vrt&quot; or flowVars.originallocation != null ? ('${ftpDestination.vrt.path}' + flowVars.arAddition + flowVars.cropAddition) : ('${ftpDestination.vrt.path}')]" user="${ftpDestination.vrt.username}" password="${ftpDestination.vrt.password}"  connector-ref="FTP" outputPattern="#[flowVars.pid + &quot;.xml&quot;]" responseTimeout="1000000" doc:name="FTP"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="FTP Timeout for sidecar! Retrying" level="INFO" doc:name="Logger"/>
            <expression-component doc:name="Sleep"><![CDATA[Thread.sleep(2000);]]></expression-component>
            <flow-ref name="SidecarFTPVRT" doc:name="SidecarFTPVRT"/>
        </catch-exception-strategy>
    </flow>
    <flow name="SidecarFTPGeneric" processingStrategy="synchronous">
        <ftp:outbound-endpoint host="${ftpDestinationSidecar.host}" port="21" path="#[flowVars.destinationPath]" user="${ftpDestinationSidecar.username}" password="${ftpDestinationSidecar.password}"   outputPattern="#[flowVars.pid + &quot;.xml&quot;]" responseTimeout="1000000" doc:name="FTP" connector-ref="FTP"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="FTP Timeout for sidecar! Retrying" level="INFO" doc:name="Logger"/>
            <expression-component doc:name="Sleep"><![CDATA[Thread.sleep(2000);]]></expression-component>
            <flow-ref name="SidecarFTPGeneric" doc:name="SidecarFTPGeneric"/>
        </catch-exception-strategy>
    </flow>
    <flow name="DeliverSubtitlesMedialaan">
        <set-variable variableName="eventName" value="PI_DELIVER_SUBTITLES" doc:name="Set eventName"/>
        <set-payload value="#[flowVars.incomingXml]" doc:name="Set Payload with sidecar"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:input-payload doc:sample="sample_data/empty_1.xml"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
AXFRoot: {
		StratumEx @(name: 'SUBTITLES'): {
			(payload.AXFRoot.MAObject.*StratumEx filter $.@name == "SUBTITLES" mapObject (
					test: $
				)
			)
		},
		S_SUBTITLES: 
			(payload.AXFRoot.*MAObject filter $.@mdclass == "S_SUBTITLES" mapObject (
						{MAObject @(type: 'default', mdclass: 'S_SUBTITLES'): ($ as :object) }
				)
			)
}
]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <set-variable variableName="pid_strata" value="#[flowVars.pid + '_strata']" doc:name="Set pid_strata"/>
        <ftp:outbound-endpoint host="${ftpDestinationCollateral.host}" port="21" path="#[flowVars.path]" user="${ftpDestinationCollateral.username}" password="${ftpDestinationCollateral.password}" connector-ref="SidecarXML" outputPattern="#[flowVars.pid_strata + '.xml']" responseTimeout="10000" doc:name="FTP as collateral (pid_strata)"/>
        <set-variable variableName="result" value="#['OK']" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="#['Subtitles delivered as collateral.']" doc:name="Set comment"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </flow>
    <flow name="DeliverSubtitlesMedialaanVTTAndSRT">
        <set-variable variableName="eventName" value="PI_DELIVER_SUBTITLES" doc:name="Set eventName"/>
        <set-payload value="#[flowVars.incomingXml]" doc:name="Set Payload with sidecar"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="vtt_text" value="#[&quot;WEBVTT\n\n&quot;]" doc:name="Init vtt_text"/>
        <set-variable variableName="srt_text" value="#[&quot;&quot;]" doc:name="Init srt_text"/>
        <foreach collection="#[xpath('//StratumEx[@name=&quot;SUBTITLES&quot;]/Group/Segment')]" doc:name="For Each subtitle segment">
            <set-variable variableName="guid" value="#[xpath('@contentid').value]" doc:name="Set guid"/>
            <set-variable variableName="begin" value="#[xpath('@begin').value]" doc:name="Set begin"/>
            <set-variable variableName="end" value="#[xpath('@end').value]" doc:name="Set end"/>
            <set-variable variableName="description" value="#[xpath('//MAObject/Meta[@name=&quot;SEGMENT_SUBTITLES_DESCRIPTION&quot; and parent::node()/GUID=&quot;' + flowVars.guid + '&quot;]/text()').getData()]" doc:name="Set description"/>
            <set-variable variableName="begin_milli" value="#[(int) (flowVars.begin % 1000)]" doc:name="Set begin_milli"/>
            <set-variable variableName="begin_milli_zero" value="#[String.format(&quot;%03d&quot;, flowVars.begin_milli)]" doc:name="Set begin_milli_zero"/>
            <set-variable variableName="begin_hours" value="#[(int) ((flowVars.begin / (1000*60*60)) % 24)]" doc:name="Set begin_hours"/>
            <set-variable variableName="begin_hours_zero" value="#[String.format(&quot;%02d&quot;, flowVars.begin_hours)]" doc:name="Set begin_hours_zero"/>
            <set-variable variableName="begin_minutes" value="#[(int) ((flowVars.begin / (1000*60)) % 60)]" doc:name="Set begin_minutes"/>
            <set-variable variableName="begin_minutes_zero" value="#[String.format(&quot;%02d&quot;, flowVars.begin_minutes)]" doc:name="Set begin_minutes_zero"/>
            <set-variable variableName="begin_seconds" value="#[(int) (flowVars.begin / 1000) % 60]" doc:name="Set begin_seconds"/>
            <set-variable variableName="begin_seconds_zero" value="#[String.format(&quot;%02d&quot;, flowVars.begin_seconds)]" doc:name="Set begin_seconds_zero"/>
            <set-variable variableName="begin_date_vtt" value="#[flowVars.begin_hours_zero + ':' + flowVars.begin_minutes_zero + ':' + flowVars.begin_seconds_zero + '.' + flowVars.begin_milli_zero]" doc:name="Set begin_date_vtt (HH:mm:ss.MMM)"/>
            <set-variable variableName="begin_date_srt" value="#[flowVars.begin_hours_zero + ':' + flowVars.begin_minutes_zero + ':' + flowVars.begin_seconds_zero + ',' + flowVars.begin_milli_zero]" doc:name="Set begin_date_srt (HH:mm:ss,MMM)"/>
            <set-variable variableName="end_milli" value="#[(int) (flowVars.end % 1000)]" doc:name="Set end_milli"/>
            <set-variable variableName="end_milli_zero" value="#[String.format(&quot;%03d&quot;, flowVars.end_milli)]" doc:name="Set end_milli_zero"/>
            <set-variable variableName="end_hours" value="#[(int) ((flowVars.end / (1000*60*60)) % 24)]" doc:name="Set end_hours"/>
            <set-variable variableName="end_hours_zero" value="#[String.format(&quot;%02d&quot;, flowVars.end_hours)]" doc:name="Set end_hours_zero"/>
            <set-variable variableName="end_minutes" value="#[(int) ((flowVars.end / (1000*60)) % 60)]" doc:name="Set end_minutes"/>
            <set-variable variableName="end_minutes_zero" value="#[String.format(&quot;%02d&quot;, flowVars.end_minutes)]" doc:name="Set end_minutes_zero"/>
            <set-variable variableName="end_seconds" value="#[(int) (flowVars.end / 1000) % 60]" doc:name="Set end_seconds"/>
            <set-variable variableName="end_seconds_zero" value="#[String.format(&quot;%02d&quot;, flowVars.end_seconds)]" doc:name="Set end_seconds_zero"/>
            <set-variable variableName="end_date_vtt" value="#[flowVars.end_hours_zero + ':' + flowVars.end_minutes_zero + ':' + flowVars.end_seconds_zero + '.' + flowVars.end_milli_zero]" doc:name="Set end_date_vtt (HH:mm:ss.MMM)"/>
            <set-variable variableName="end_date_srt" value="#[flowVars.end_hours_zero + ':' + flowVars.end_minutes_zero + ':' + flowVars.end_seconds_zero + ',' + flowVars.end_milli_zero]" doc:name="Set end_date_srt (HH:mm:ss,MMM)"/>
            <logger message="New text block: #[flowVars.begin_date_vtt + &quot; --&gt; &quot; + flowVars.end_date_vtt + &quot;\n&quot; + flowVars.description + &quot;\n&quot;]" level="INFO" doc:name="New text block"/>
            <set-variable variableName="vtt_text" value="#[flowVars.vtt_text + flowVars.counter + &quot;\n&quot; + flowVars.begin_date_vtt + &quot; --&gt; &quot; + flowVars.end_date_vtt + &quot;\n&quot; + flowVars.description + &quot;\n\n&quot;]" doc:name="Append block to vtt_text"/>
            <set-variable variableName="srt_text" value="#[flowVars.srt_text + flowVars.counter + &quot;\n&quot; + flowVars.begin_date_srt + &quot; --&gt; &quot; + flowVars.end_date_srt + &quot;\n&quot; + flowVars.description + &quot;\n\n&quot;]" doc:name="Append block to srt_text"/>
        </foreach>
        <logger level="INFO" doc:name="Logger"/>
        <set-payload value="#[flowVars.vtt_text]" doc:name="Set Payload with vtt_text"/>
        <set-variable variableName="pid_vtt" value="#[flowVars.pid + '_vtt']" doc:name="Set pid_vtt"/>
        <set-variable variableName="filenameVTT" value="#[flowVars.pid_vtt + '.vtt']" doc:name="Set filenameVTT"/>
        <ftp:outbound-endpoint host="${ftpDestinationCollateral.host}" port="21" path="#[flowVars.path]" user="${ftpDestinationCollateral.username}" password="${ftpDestinationCollateral.password}" connector-ref="SidecarXML" outputPattern="#[flowVars.filenameVTT]" responseTimeout="10000" doc:name="FTP as collateral (pid_vtt.vtt)"/>
        <set-variable variableName="pid_srt" value="#[flowVars.pid + '_srt']" doc:name="Set pid_srt"/>
        <set-variable variableName="filenameSRT" value="#[flowVars.pid_srt + '.srt']" doc:name="Set filenameSRT"/>
        <set-payload value="#[flowVars.srt_text]" doc:name="Set Payload with srt_text"/>
        <ftp:outbound-endpoint host="${ftpDestinationCollateral.host}" port="21" path="#[flowVars.path]" user="${ftpDestinationCollateral.username}" password="${ftpDestinationCollateral.password}" connector-ref="SidecarXML" outputPattern="#[flowVars.filenameSRT]" responseTimeout="10000" doc:name="FTP as collateral (pid_srt.srt)"/>
        <set-variable variableName="result" value="#['OK']" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="#['Subtitles delivered as VTT collateral.']" doc:name="Set comment"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </flow>
    <sub-flow name="RetrieveAspectRatio">
        <choice doc:name="Don't request AR when the file is audio">
            <when expression="#[flowVars.extension != &quot;mp2&quot; &amp;&amp; flowVars.extension != &quot;wav&quot;]">
                <http:request config-ref="Aspect_ratio_API" path="#['/vrt/' + flowVars.mediaId]" method="GET" doc:name="Request aspect ratios of the original (vrt) pid to see difference between metadata and essence (must be mediaId!)"/>
                <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
                <set-variable variableName="aspect_ratio_essence" value="#[payload.data.aspect_ratio_essence]" doc:name="Set aspect_ratio_essence"/>
                <set-variable variableName="height_metadata" value="#[payload.data.hires_height]" doc:name="Set height_metadata"/>
                <set-variable variableName="aspect_ratio_metadata" value="#[payload.data.aspect_ratio_metadata]" doc:name="Set aspect_ratio_metadata"/>
                <choice doc:name="Valid AR?">
                    <when expression="#[flowVars.aspect_ratio_metadata == null || (!flowVars.aspect_ratio_metadata.equals('4:3') &amp;&amp; !flowVars.aspect_ratio_metadata.equals('16:9'))]">
                        <scripting:component doc:name="Throw exception">
                            <scripting:script engine="Groovy"><![CDATA[throw new IllegalArgumentException('Invalid aspect ratio!')
    ]]></scripting:script>
                        </scripting:component>
                    </when>
                    <otherwise>
                        <logger message="AR looks ok! #[flowVars.aspect_ratio_metadata]" level="INFO" doc:name="AR looks ok!"/>
                    </otherwise>
                </choice>
                <choice doc:name="Essence and metadata aspect ratios are equal?">
                    <when expression="#[flowVars.aspect_ratio_essence.equals(flowVars.aspect_ratio_metadata)]">
                        <set-variable variableName="arAddition" value="#[&quot;&quot;]" doc:name="Set arAddition to empty"/>
                    </when>
                    <otherwise>
                        <set-variable variableName="arAddition" value="#[&quot;-&quot; + flowVars.aspect_ratio_metadata]" doc:name="Set arAddition"/>
                    </otherwise>
                </choice>
                <choice doc:name="Essence has timecodes (height = 608 or 1112)">
                    <when expression="#[flowVars.height_metadata != null &amp;&amp; (flowVars.height_metadata == (576+32) || flowVars.height_metadata == (1080+32))]">
                        <set-variable variableName="cropAddition" value="-CROP" doc:name="Set cropAddition to &quot;-CROP&quot;"/>
                    </when>
                    <otherwise>
                        <set-variable variableName="cropAddition" value="#[&quot;&quot;]" doc:name="Set cropAddition to empty"/>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <set-variable variableName="arAddition" value="#[&quot;&quot;]" doc:name="Set arAddition to empty"/>
                <set-variable variableName="cropAddition" value="#[&quot;&quot;]" doc:name="Set cropAddition to empty"/>
            </otherwise>
        </choice>
    </sub-flow>
    <flow name="PI_DELIVERY_METADATA_RECON">
        <flow-ref name="setMediahavenAuthHeader" doc:name="setMediahavenAuthHeader"/>
        <set-payload value="#[&quot;&quot;]" doc:name="Set Payload empty"/>
        <set-variable variableName="pid" value="#['qs07qn5zv57']" doc:name="Set pid"/>
        <http:request config-ref="Mediahaven" path="/media/" method="GET" doc:name="Check status with pid">
            <http:request-builder>
                <http:query-param paramName="q" value="+(MediaObjectExternalId:#[flowVars.pid])"/>
                <http:header headerName="Authorization" value="#[flowVars.authHeader]"/>
            </http:request-builder>
        </http:request>
        <byte-array-to-object-transformer doc:name="Byte Array to Object" mimeType="application/json"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <choice doc:name="Choice">
            <when expression="#[payload.mediaDataList.size() == 0]">
                <logger message="Not found for metadata updating #[flowVars.pid]" level="INFO" doc:name="Not found for metadata updating"/>
            </when>
            <otherwise>
                <set-variable variableName="fragment_id" value="#[payload.mediaDataList[0].fragmentId]" doc:name="Set fragment_id"/>
                <set-payload value="#[flowVars.mappedXml]" doc:name="Set Payload with mappedXml"/>
                <set-attachment attachmentName="#['metadata']" value="#[payload]" contentType="text/plain" doc:name="Set metadata"/>
                <set-payload value="#[&quot;&quot;]" doc:name="Set Payload as empty string"/>
                <logger message="Sending metadata update for #[flowVars.pid]" level="INFO" doc:name="Sending metadata update"/>
                <until-successful maxRetries="5" synchronous="true" doc:name="Until Successful">
                    <http:request config-ref="Update_fragments" path="#['/mediahaven-rest-api/resources/media/' + flowVars.fragment_id]" method="POST" followRedirects="false" parseResponse="false" doc:name="Update metadata with API">
                        <http:request-builder>
                            <http:header headerName="Authorization" value="#[flowVars.authHeader]"/>
                        </http:request-builder>
                    </http:request>
                </until-successful>
                <logger message="Succes! Metadata is updated for #[flowVars.pid]" level="INFO" doc:name="Succes! Metadata is updated"/>
            </otherwise>
        </choice>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="FTP Timeout for sidecar! Retrying" level="INFO" doc:name="Logger"/>
            <expression-component doc:name="Sleep"><![CDATA[Thread.sleep(2000);]]></expression-component>
            <flow-ref name="SidecarFTPGeneric" doc:name="SidecarFTPGeneric"/>
        </catch-exception-strategy>
    </flow>
    <sub-flow name="setMediahavenAuthHeader">
        <set-variable variableName="mediahaven_api_username" value="${mediahaven_api.username}" doc:name="Set mediahaven_api_username"/>
        <set-variable variableName="mediahaven_api_password" value="${mediahaven_api.password}" doc:name="Set mediahaven_api_password"/>
        <set-variable variableName="auth" value="#[flowVars.mediahaven_api_username + &quot;:&quot; + flowVars.mediahaven_api_password]" doc:name="Set auth for mediahaven_api user"/>
        <set-variable variableName="authHeader" value="#[&quot;Basic &quot; + Base64.getEncoder().encodeToString(flowVars.auth.getBytes())]" doc:name="Set authHeader"/>
    </sub-flow>
</mule>
