<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ftplite="http://www.mulesoft.org/schema/mule/ftplite" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:tls="http://www.mulesoft.org/schema/mule/tls"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:ftp="http://www.mulesoft.org/schema/mule/ee/ftp"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/ftp http://www.mulesoft.org/schema/mule/ee/ftp/current/mule-ftp-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ftplite http://www.mulesoft.org/schema/mule/ftplite/current/mule-ftplite.xsd">
    <http:request-config name="mimetype2extensionAPI" host="${mime2ext.host}" port="${mime2ext.port}" basePath="/" responseTimeout="30000" doc:name="HTTP Request Configuration"/>
    <http:request-config name="Mediahaven" host="${mediahaven_api.host_intern}" port="443" basePath="/mediahaven-rest-api/resources" doc:name="HTTP Request Configuration" responseTimeout="30000" protocol="HTTPS">
        <tls:context>
            <tls:key-store alias="${keystore.alias}" keyPassword="${keystore.password}" password="${keystore.password}"/>
        </tls:context>
    </http:request-config>
    <http:request-config name="Update_fragments" host="${mediahaven_api.host_intern}" port="443" basePath="/" doc:name="HTTP Request Configuration" responseTimeout="30000" protocol="HTTPS">
        <tls:context>
            <tls:key-store alias="${keystore.alias}" keyPassword="${keystore.password}" password="${keystore.password}"/>
        </tls:context>
    </http:request-config>
    <sub-flow name="PI_SIP_DELIVERY_VRT">
        <set-variable variableName="eventName" value="PI_SIP_DELIVERY" doc:name="Set Name"/>
        <set-variable variableName="okstatus" value="#[true]" doc:name="Set OKstatus"/>
        <foreach collection="#[flowVars.files.entrySet()]" doc:name="For Each">
            <choice doc:name="Choice">
                <when expression="#[!payload.key.equals(&quot;sidecar&quot;)]">
                    <flow-ref name="while_free_space" doc:name="while_free_space"/>
                    <choice doc:name="When manual or redelivery of tape, check AR for destination path">
                        <when expression="#[flowVars.origin == 'manual' || flowVars.originallocation != null]">
                            <logger message="[#[message.id]] #[flowVars.local_id] is manual request or tape redelivery" level="INFO" doc:name="manual request or tape redelivery"/>
                            <flow-ref name="RetrieveAspectRatio" doc:name="RetrieveAspectRatio"/>
                        </when>
                        <otherwise>
                            <logger message="[#[message.id]] #[flowVars.local_id] is dailies" level="INFO" doc:name="Dailies"/>
                        </otherwise>
                    </choice>
                    <set-payload value="#[&quot;&quot;]" doc:name="Set Payload empty"/>
                    <set-variable variableName="vrt_destination_path" value="#[flowVars.origin != &quot;vrt&quot; || flowVars.originallocation != null ? ('${ftpDestination.vrt.path}' + flowVars.arAddition + flowVars.cropAddition) : '${ftpDestination.vrt.path}']" doc:name="Set vrt_destination_path"/>
                    
                    <dw:transform-message doc:name="Transform Message">
                        <dw:input-variable variableName="currentItem"/>
                        <dw:set-payload><![CDATA[%dw 1.0
%input payload application/java
%output application/json
---
{
	"destination_file": flowVars.pid ++ '.' ++ flowVars.extension,
    "destination_host": p('ftpDestination.vrt.host'),
    "destination_password": p('ftpDestination.vrt.password'),
    "destination_path": flowVars.vrt_destination_path,
    "destination_user": p('ftpDestination.vrt.username'),
    "source_file": flowVars.filenameWithoutExtension ++ '.' ++ flowVars.extension,
    "source_host": flowVars.host,
    "source_password": flowVars.sourcePassword,
    "source_path": flowVars.filepath,
    "source_user": flowVars.sourceUsername,
    "move": true
}]]></dw:set-payload>
                    </dw:transform-message>
                    <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                    <amqp:outbound-endpoint queueName="fxp_requests" responseTimeout="10000"  connector-ref="RabbitMQConnectorFXP" doc:name="Send message to fxp_requests">
                    </amqp:outbound-endpoint>
                    <set-payload value="#[flowVars.mappedXml]" doc:name="Set Payload"/>
                    <flow-ref name="SidecarFTPVRT" doc:name="SidecarFTPVRT"/>
                    <!-- 
                    <invoke object-ref="requestTransformer" method="Transform" methodArguments="#[payload], #[flowVars.pid], ${ftpDestination.path}, #[flowVars.input.cp_name]" doc:name="Invoke"/>
                    <set-variable variableName="temppath" value="#[payload.destinationPath + payload.destination_file]" doc:name="Set file path"/>
                    <set-variable variableName="locationPath" value="#[payload.destinationPath]" doc:name="Set location path"/>
                    <json:object-to-json-transformer doc:name="Object to JSON"/>
                    -->
                </when>
                <otherwise>
                    <logger message="[#[message.id]] Deleting sidecar" level="INFO" doc:name="Log deletion of sidecar"/>
                    <dw:transform-message doc:name="Build delete request">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"file_name": flowVars.filenameWithoutExtension ++ ".xml",
	"file_path": flowVars.filepath,
    "host": flowVars.host,
    "username": flowVars.sourceUsername,
    "password": flowVars.sourcePassword,
    "correlation_id": flowVars.correlation_id
}]]></dw:set-payload>
                    </dw:transform-message>
                    <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                    <amqp:outbound-endpoint queueName="delete_requests" responseTimeout="10000" doc:name="Send message to delete_requests" connector-ref="RabbitMQConnectorDelete">
                    </amqp:outbound-endpoint>
                </otherwise>
            </choice>
        </foreach>
        <flow-ref name="SetResultAndCommentFXP" doc:name="SetResultAndCommentFXP"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <sub-flow name="PI_SIP_DELIVERY_GENERIC_ESSENCE">
        <set-variable variableName="eventName" value="PI_SIP_DELIVERY" doc:name="Set Name"/>
        <set-variable variableName="okstatus" value="#[true]" doc:name="Set OKstatus"/>
        <enricher source="#[payload.cp_name_mam]" target="#[flowVars.cp_name_mam]" doc:name="Set cp_name_mam">
            <flow-ref name="getCpByOrId" doc:name="getCpByOrId"/>
        </enricher>
        <set-variable variableName="destinationPath" value="#[&quot;/&quot; + flowVars.cp_name_mam + &quot;/&quot; + &quot;${ftpDestinationSidecar.dest_path}&quot;]" doc:name="Set destinationPath"/>
        <flow-ref name="while_free_space" doc:name="while_free_space"/>
        <dw:transform-message doc:name="Build fxp request">
            <dw:input-variable variableName="currentItem"/>
            <dw:set-payload><![CDATA[%dw 1.0
%input payload application/java
%output application/json
---
{
	"destination_file": flowVars.pid ++ '.' ++ flowVars.extension,
    "destination_host": p('ftpDestinationSidecar.host'),
    "destination_password": p('ftpDestinationSidecar.password'),
    "destination_path": flowVars.destinationPath,
    "destination_user": p('ftpDestinationSidecar.username'),
    "source_file": flowVars.filenameWithoutExtension ++ '.' ++ flowVars.extension,
    "source_host": flowVars.host,
    "source_password": flowVars.sourcePassword,
    "source_path": flowVars.filepath,
    "source_user": flowVars.sourceUsername,
    "move": false
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <logger message="[#[message.id]] Sending fxp request: #[payload]" level="INFO" doc:name="Sending fxp request"/>
        <amqp:outbound-endpoint queueName="fxp_requests" responseTimeout="10000"  connector-ref="RabbitMQConnectorFXP" doc:name="Send message to fxp_requests"/>
        <logger message="[#[message.id]] Fxp message sent: source: #[flowVars.filenameWithoutExtension] / pid: #[flowVars.pid]" level="INFO" doc:name="Log: Fxp message sent"/>
        <flow-ref name="SetResultAndCommentFXP" doc:name="SetResultAndCommentFXP"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <sub-flow name="PI_SIP_DELIVERY_GENERIC_SIDECAR">
        <set-payload value="#[flowVars.mappedXml]" doc:name="Set Payload with mappedXml"/>
        <flow-ref name="SidecarFTPGeneric" doc:name="SidecarFTPGeneric"/>
    </sub-flow>
    <flow name="while_free_space" processingStrategy="synchronous">
    	<http:request config-ref="Sensor_API_Configuration" path="${sensor.path}" method="GET"  doc:name="HTTP sensor">
            <http:request-builder>
                <http:query-param paramName="content" value="channels"/>
                <http:query-param paramName="output" value="xml"/>
                <http:query-param paramName="columns" value="name,lastvalue_"/>
                <http:query-param paramName="id" value="${sensor.id}"/>
                <http:query-param paramName="username" value="${sensor.username}"/>
                <http:query-param paramName="password" value="${sensor.password}"/>
            </http:request-builder>
        </http:request>
        <until-successful maxRetries="999999999" synchronous="true" doc:name="Until Successful">
            <flow-ref name="while_free_space_sub" doc:name="while_free_space_sub"/>
        </until-successful>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="[#[message.id]] No sensor found. Proceeding" level="WARN" doc:name="Logger"/>
        </catch-exception-strategy>
    </flow>
    <sub-flow name="SetResultAndCommentFXP">
        <set-variable variableName="result" value="#['OK']" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="#[&quot;Message has been sent to fxp_requests.&quot;]" doc:name="Set comment"/>
    </sub-flow>
    <sub-flow name="while_free_space_sub">
        <logger message="[#[message.id]] Checking free space" level="INFO" doc:name="Logger"/>
        <http:request config-ref="Sensor_API_Configuration" path="${sensor.path}" method="GET"  doc:name="HTTP sensor">
            <http:request-builder>
                <http:query-param paramName="output" value="xml"/>
                <http:query-param paramName="id" value="${sensor.id}"/>
                <http:query-param paramName="username" value="${sensor.username}"/>
                <http:query-param paramName="password" value="${sensor.password}"/>
                <http:query-param paramName="content" value="channels"/>
                <http:query-param paramName="columns" value="name,lastvalue_"/>
            </http:request-builder>
        </http:request>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="freepercentage" value="#[java.lang.Integer.parseInt(xpath3(&quot;//channels/item[name='pctfree']/lastvalue/text()&quot;).split(' %')[0])]" doc:name="Set freepercentage"/>
        <logger message="[#[message.id]] #[&quot;Free percentage: &quot; + flowVars.freepercentage + &quot; %&quot;]" level="INFO" doc:name="Logger"/>
        <message-filter throwOnUnaccepted="true" doc:name="Message">
            <expression-filter expression="#[flowVars.freepercentage &gt; '${sensor.minfreepercentage}']"/>
        </message-filter>
    </sub-flow>
    <flow name="SidecarFTPVRT" processingStrategy="synchronous">
    		<ftplite:upload-stream
    			hostName="${ftpDestination.vrt.host}"
    			userName="${ftpDestination.vrt.username}"
    			fileName="#[flowVars.pid + &quot;.xml&quot;]"
    			filePath="#[flowVars.vrt_destination_path]"
    			config-ref="FTPLite__Configuration"
    			password="${ftpDestination.vrt.password}" doc:name="FTPLite"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="[#[message.id]] FTP Timeout for sidecar! Retrying" level="INFO" doc:name="Logger"/>
            <expression-component doc:name="Sleep"><![CDATA[Thread.sleep(2000);]]></expression-component>
            <flow-ref name="SidecarFTPVRT" doc:name="SidecarFTPVRT"/>
        </catch-exception-strategy>
    </flow>
    <flow name="SidecarFTPGeneric" processingStrategy="synchronous">
    		<ftplite:upload-stream
    			hostName="${ftpDestinationSidecar.host}"
    			userName="${ftpDestinationSidecar.username}"
    			fileName="#[flowVars.pid + &quot;.xml&quot;]"
    			filePath="#[flowVars.destinationPath]"
    			config-ref="FTPLite__Configuration"
    			password="${ftpDestinationSidecar.password}" doc:name="FTPLite"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="[#[message.id]] FTP Timeout for sidecar! Retrying" level="INFO" doc:name="Logger"/>
            <expression-component doc:name="Sleep"><![CDATA[Thread.sleep(2000);]]></expression-component>
            <flow-ref name="SidecarFTPGeneric" doc:name="SidecarFTPGeneric"/>
        </catch-exception-strategy>
    </flow>
    <sub-flow name="RetrieveAspectRatio">
        <choice doc:name="Don't request AR when the file is audio">
            <when expression="#[flowVars.extension != &quot;mp2&quot; &amp;&amp; flowVars.extension != &quot;wav&quot;]">
                <http:request config-ref="Aspect_ratio_API" path="#['/vrt/' + flowVars.mediaId]" method="GET" doc:name="Request aspect ratios of the original (vrt) pid to see difference between metadata and essence (must be mediaId!)"/>
                <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
                <set-variable variableName="aspect_ratio_essence" value="#[payload.data.aspect_ratio_essence]" doc:name="Set aspect_ratio_essence"/>
                <set-variable variableName="height_metadata" value="#[payload.data.hires_height]" doc:name="Set height_metadata"/>
                <set-variable variableName="aspect_ratio_metadata" value="#[payload.data.aspect_ratio_metadata]" doc:name="Set aspect_ratio_metadata"/>
                <choice doc:name="Valid AR?">
                    <when expression="#[flowVars.aspect_ratio_metadata != &quot;unknown&quot; &amp;&amp; (flowVars.aspect_ratio_metadata == null || (!flowVars.aspect_ratio_metadata.equals('4:3') &amp;&amp; !flowVars.aspect_ratio_metadata.equals('16:9')))]">
                        <scripting:component doc:name="Throw exception">
                            <scripting:script engine="Groovy"><![CDATA[throw new IllegalArgumentException('Invalid aspect ratio!')
    ]]></scripting:script>
                        </scripting:component>
                    </when>
                    <otherwise>
                        <logger message="[#[message.id]] AR looks ok! #[flowVars.aspect_ratio_metadata]" level="INFO" doc:name="AR looks ok!"/>
                    </otherwise>
                </choice>
                <choice doc:name="Essence and metadata aspect ratios are equal?">
                    <when expression="#[flowVars.aspect_ratio_essence.equals(flowVars.aspect_ratio_metadata)]">
                        <set-variable variableName="arAddition" value="#[&quot;&quot;]" doc:name="Set arAddition to empty"/>
                    </when>
                    <otherwise>
                        <set-variable variableName="arAddition" value="#[&quot;-&quot; + flowVars.aspect_ratio_metadata]" doc:name="Set arAddition"/>
                    </otherwise>
                </choice>
                <choice doc:name="Essence has timecodes (height = 608 or 1112)">
                    <when expression="#[flowVars.height_metadata != null &amp;&amp; (flowVars.height_metadata == (576+32) || flowVars.height_metadata == (1080+32))]">
                        <set-variable variableName="cropAddition" value="-CROP" doc:name="Set cropAddition to &quot;-CROP&quot;"/>
                    </when>
                    <otherwise>
                        <set-variable variableName="cropAddition" value="#[&quot;&quot;]" doc:name="Set cropAddition to empty"/>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <set-variable variableName="arAddition" value="#[&quot;&quot;]" doc:name="Set arAddition to empty"/>
                <set-variable variableName="cropAddition" value="#[&quot;&quot;]" doc:name="Set cropAddition to empty"/>
            </otherwise>
        </choice>
    </sub-flow>
    <flow name="PI_DELIVERY_METADATA_RECON">
        <set-variable variableName="eventName" value="#[&quot;PI_METADATA_UPDATE&quot;]" doc:name="Set eventName"/>
        <flow-ref name="setMediahavenAuthHeader" doc:name="setMediahavenAuthHeader"/>
        <set-payload value="#[&quot;&quot;]" doc:name="Set Payload empty"/>
        <http:request config-ref="Mediahaven" path="/media/" method="GET" doc:name="Check status with pid">
            <http:request-builder>
                <http:query-param paramName="q" value="+(MediaObjectExternalId:#[flowVars.pid] AND NOT (MediaObjectType: &quot;videofragment&quot; OR MediaObjectType: &quot;audiofragment&quot;))"/>
                <http:header headerName="Authorization" value="#[flowVars.authHeader]"/>
            </http:request-builder>
        </http:request>
        <byte-array-to-object-transformer doc:name="Byte Array to Object" mimeType="application/json"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <choice doc:name="Choice">
            <when expression="#[payload.mediaDataList.size() == 0]">
                <logger message="[#[message.id]] Not found for metadata updating #[flowVars.pid]" level="INFO" doc:name="Not found for metadata updating"/>
                <set-variable variableName="result" value="#[&quot;NOK&quot;]" doc:name="Set result NOK"/>
                <set-variable variableName="comment" value="#[&quot;Failed to update medata&quot;]" doc:name="Set comment"/>
            </when>
            <otherwise>
                <set-variable variableName="fragment_id" value="#[payload.mediaDataList[0].fragmentId]" doc:name="Set fragment_id"/>
                <set-payload value="#[flowVars.mappedXml]" doc:name="Set Payload with mappedXml"/>
                <set-attachment attachmentName="#['metadata']" value="#[payload]" contentType="text/plain" doc:name="Set metadata"/>
                <set-payload value="#[&quot;&quot;]" doc:name="Set Payload as empty string"/>
                <logger message="[#[message.id]] Sending metadata update for #[flowVars.pid]" level="INFO" doc:name="Sending metadata update"/>
                <until-successful maxRetries="5" synchronous="true" doc:name="Until Successful">
                    <http:request config-ref="Update_fragments" path="#['/mediahaven-rest-api/resources/media/' + flowVars.fragment_id]" method="POST" followRedirects="false" parseResponse="false" doc:name="Update metadata with API">
                        <http:request-builder>
                            <http:header headerName="Authorization" value="#[flowVars.authHeader]"/>
                        </http:request-builder>
                    </http:request>
                </until-successful>
                <logger message="[#[message.id]] Succes! Metadata is updated for #[flowVars.pid]" level="INFO" doc:name="Succes! Metadata is updated"/>
                <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
                <set-variable variableName="comment" value="#[&quot;Metadata updated for local_id: &quot; + flowVars.local_id + &quot; and pid: &quot; + flowVars.pid]" doc:name="Set comment"/>
            </otherwise>
        </choice>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="[#[message.id]] FTP Timeout for sidecar! Retrying" level="INFO" doc:name="Logger"/>
            <expression-component doc:name="Sleep"><![CDATA[Thread.sleep(2000);]]></expression-component>
            <flow-ref name="PI_DELIVERY_METADATA_RECON" doc:name="PI_DELIVERY_METADATA_RECON"/>
        </catch-exception-strategy>
    </flow>
    <sub-flow name="setMediahavenAuthHeader">
        <set-variable variableName="mediahaven_api_username" value="${mediahaven_api.username}" doc:name="Set mediahaven_api_username"/>
        <set-variable variableName="mediahaven_api_password" value="${mediahaven_api.password}" doc:name="Set mediahaven_api_password"/>
        <set-variable variableName="auth" value="#[flowVars.mediahaven_api_username + &quot;:&quot; + flowVars.mediahaven_api_password]" doc:name="Set auth for mediahaven_api user"/>
        <set-variable variableName="authHeader" value="#[&quot;Basic &quot; + Base64.getEncoder().encodeToString(flowVars.auth.getBytes())]" doc:name="Set authHeader"/>
    </sub-flow>
</mule>
