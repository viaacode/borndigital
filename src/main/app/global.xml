<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ftp="http://www.mulesoft.org/schema/mule/ee/ftp" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:tcp="http://www.mulesoft.org/schema/mule/tcp" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:jdbc-ee="http://www.mulesoft.org/schema/mule/ee/jdbc" xmlns:jdbc="http://www.mulesoft.org/schema/mule/jdbc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/ee/jdbc http://www.mulesoft.org/schema/mule/ee/jdbc/current/mule-jdbc-ee.xsd
http://www.mulesoft.org/schema/mule/ee/ftp http://www.mulesoft.org/schema/mule/ee/ftp/current/mule-ftp-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/tcp http://www.mulesoft.org/schema/mule/tcp/current/mule-tcp.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <context:property-placeholder location="${mule.env}.properties"></context:property-placeholder>
    <amqp:connector name="RabbitMQConnector" validateConnections="true" doc:name="AMQP-0-9 Connector" host="${rabbit.host}" password="${rabbit.password}" port="${rabbit.port}" username="${rabbit.username}" prefetchCount="1" numberOfChannels="1" ackMode="MANUAL"> 
        <reconnect></reconnect>  
    </amqp:connector>
    <amqp:connector name="RabbitMQConnectorError" validateConnections="true" doc:name="AMQP-0-9 Connector" host="${rabbit.host}" password="${rabbit.password}" port="${rabbit.port}" username="${rabbit.username}" prefetchCount="1" numberOfChannels="1" ackMode="MANUAL"> 
        <reconnect></reconnect>  
    </amqp:connector>
    <amqp:connector name="RabbitMQConnectorMove" validateConnections="true" doc:name="AMQP-0-9 Connector" host="${rabbit.move.host}" password="${rabbit.move.password}" port="${rabbit.move.port}" username="${rabbit.move.username}" prefetchCount="1" numberOfChannels="1" ackMode="MANUAL"> 
        <reconnect-forever></reconnect-forever>  
    </amqp:connector>
    <amqp:connector name="RabbitMQConnectorFXP" validateConnections="true" doc:name="AMQP-0-9 Connector" host="${rabbit.fxp.host}" password="${rabbit.fxp.password}" port="${rabbit.fxp.port}" username="${rabbit.fxp.username}" prefetchCount="1" numberOfChannels="1" ackMode="MANUAL"> 
        <reconnect-forever></reconnect-forever>  
    </amqp:connector>
    <amqp:connector name="RabbitMQConnectorDelete" validateConnections="true" doc:name="AMQP-0-9 Connector" host="${rabbit.fxp.host}" password="${rabbit.fxp.password}" port="${rabbit.fxp.port}" username="${rabbit.fxp.username}" prefetchCount="1" numberOfChannels="1" ackMode="MANUAL"> 
        <reconnect-forever></reconnect-forever>  
    </amqp:connector>
    <http:request-config name="PID_webservice" host="${pid.host}" port="${pid.port}" basePath="${pid.basepath}" doc:name="HTTP Request Configuration" responseTimeout="999999999" connectionIdleTimeout="999999999" > 
        <tcp:client-socket-properties connectionTimeout="999999999" timeout="999999999"></tcp:client-socket-properties>  
    </http:request-config>
    <db:generic-config name="POSTGRESQL_Connection" url="jdbc:postgresql://${db.host}:${db.port}/${db.database}?password=${db.password}&amp;user=${db.username}" driverClassName="org.postgresql.Driver" doc:name="Generic Database Configuration"></db:generic-config>
    <ftp:connector streaming="true" name="FTP" pollingFrequency="1000" validateConnections="true" doc:name="FTP"></ftp:connector>
    <http:request-config name="Sensor_API_Configuration" host="${sensor.host}" port="${sensor.port}" basePath="${sensor.basepath}" doc:name="HTTP Request Configuration" connectionIdleTimeout="9999999" responseTimeout="9999999" protocol="HTTPS"></http:request-config>
    <spring:beans> 
        <spring:bean id="RequestTransformer" name="requestTransformer" class="utils.RequestTransformer"></spring:bean>  
        <spring:bean id="SrtService" name="srtService" class="utils.SrtService"></spring:bean>  
        <spring:bean id="moveRequestTransformer" name="MoveRequestTransformer" class="utils.MoveRequestTransformer"></spring:bean>  
        <spring:bean id="objectStore" class="org.mule.util.store.SimpleMemoryObjectStore"></spring:bean>  
    </spring:beans>
    <mulexml:schema-validation-filter name="xsdValidator" schemaLocations="mediahaven_output_schema.xsd" doc:name="Check output format" returnResult="true"></mulexml:schema-validation-filter>
    <mulexml:schema-validation-filter schemaLocations="provant_output_schema.xsd" returnResult="false" name="Provant_Schema_Validation" doc:name="Schema Validation"></mulexml:schema-validation-filter>
    <http:listener-config name="InputCSVListener" host="0.0.0.0" port="8063" doc:name="HTTP Listener Configuration"></http:listener-config>
    <http:listener-config name="MonitoringListener" host="0.0.0.0" port="8062" doc:name="HTTP Listener Configuration"></http:listener-config>
    <choice-exception-strategy name="globalChoice_Exception_Strategy"> 
        <catch-exception-strategy when="#[exception.causedBy(org.mule.api.transformer.TransformerMessagingException)]" doc:name="Catch Exception Strategy Transformer, no XML"> 
            <set-variable variableName="comment" value="The incoming XML was not valid or could not be read" doc:name="Set Exception message"></set-variable>  
            <set-variable variableName="result" value="#['NOK']" doc:name="Set result ERROR"></set-variable>  
            <flow-ref name="PI_LOG" doc:name="PI_LOG"></flow-ref>  
            <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"></amqp:acknowledge-message>  
        </catch-exception-strategy>  
        <catch-exception-strategy doc:name="Catch Exception Strategy"> 
            <set-variable variableName="comment" value="#[(exception == null ? flowVars.comment : (exception.cause == null ? (flowVars.comment == null ? &quot;&quot; : flowVars.comment) + &quot;\n&quot; + exception.message : (exception.cause.message == null ? flowVars.comment : (exception.cause.message.equals(&quot;&quot;) ? flowVars.comment : exception.cause.message + org.mule.util.ExceptionUtils.getFullStackTrace(exception)))))]" doc:name="Set Exception message"></set-variable>  
            <set-variable variableName="result" value="#['NOK']" doc:name="Set result NOK"></set-variable>  
            <flow-ref name="PI_LOG" doc:name="PI_LOG"></flow-ref>  
            <set-payload value="#[flowVars.message]" doc:name="Set Payload"></set-payload>  
            <amqp:outbound-endpoint queueName="${rabbit.no_xml}" responseTimeout="10000" exchange-pattern="request-response" doc:name="AMQP-0-9" connector-ref="RabbitMQConnectorError">
                <reconnect/>
            </amqp:outbound-endpoint>  
            <choice doc:name="Is flow provant? Then move to Errors folder"> 
                <when expression="#[flowVars.input.flow_id.equals(&quot;provant&quot;)]"> 
                    <flow-ref name="PI_MOVE_TO_FAILURES" doc:name="PI_MOVE_TO_FAILURES"></flow-ref>  
                </when>  
                <otherwise> 
                    <logger message="Don't move to errors folder" level="INFO" doc:name="Don't move to errors folder"></logger>  
                </otherwise>  
            </choice>  
            <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"></amqp:acknowledge-message>  
        </catch-exception-strategy>  
    </choice-exception-strategy>
    <sub-flow name="PI_LOG"> 
        <db:insert config-ref="POSTGRESQL_Connection" doc:name="Log to database"> 
            <db:parameterized-query><![CDATA[INSERT INTO ${db.eventstable}(pid, cp_id, name, outcome, agent, date, comment, cp, flow_id, essence_md5)
VALUES ((#[flowVars.pid == null ? "UNKNOWN" : flowVars.pid]),
(#[flowVars.input.sip_package[0].file_name.split("\\.")[0] == null ? "UNKNOWN" : flowVars.input.sip_package[0].file_name.split("\\.")[0]]),
(#[flowVars.eventName == null ? "UNKNOWN" : flowVars.eventName]),
CAST(#[flowVars.result] as outcome),
'PI',
#[server.dateTime.format("yyyy-MM-dd HH:mm:ss")],
#[flowVars.comment],
#[flowVars.input.cp_name],
#[flowVars.input.flow_id],
(#[flowVars.md5Xml == null ? "UNKNOWN" : flowVars.md5Xml]));]]></db:parameterized-query>  
        </db:insert>  
    </sub-flow>
    <sub-flow name="PI_MOVE_TO_FAILURES"> 
        <foreach collection="#[flowVars.files]" doc:name="For Each"> 
            <dw:transform-message doc:name="Transform Message"> 
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
    "file_name": payload.file_name,
    "file_source_path": payload.file_path,
    "file_destination_path": p('ftpDestination.provant.errors_path'),
    "host": flowVars.input.server,
    "username": flowVars.input.username,
    "password": flowVars.input.password
}]]></dw:set-payload>  
            </dw:transform-message>  
            <object-to-string-transformer doc:name="Object to String"></object-to-string-transformer>  
            <amqp:outbound-endpoint queueName="${rabbit.move.move_requests}" responseTimeout="10000" exchange-pattern="request-response" doc:name="Send message to move service" connector-ref="RabbitMQConnectorMove"></amqp:outbound-endpoint>  
        </foreach>  
    </sub-flow>
    <!-- 
    <catch-exception-strategy name="globalCatch_Exception_Strategy"> 
        <set-variable variableName="comment" value="#[(exception == null ? flowVars.comment : (exception.cause == null ? (flowVars.comment == null ? &quot;&quot; : flowVars.comment) + &quot;\n&quot; + exception.message : (exception.cause.message == null ? flowVars.comment : (exception.cause.message.equals(&quot;&quot;) ? flowVars.comment : exception.cause.message + org.mule.util.ExceptionUtils.getFullStackTrace(exception)))))]" doc:name="Set Exception message"></set-variable>  
        <set-variable variableName="result" value="#['ERROR']" doc:name="Set result ERROR"></set-variable>  
        <flow-ref name="PI_LOG" doc:name="PI_LOG"></flow-ref>  
    </catch-exception-strategy>
     -->
</mule>
