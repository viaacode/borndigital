<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ftplite="http://www.mulesoft.org/schema/mule/ftplite" xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:ftp="http://www.mulesoft.org/schema/mule/ee/ftp" xmlns:cluster="http://www.mulesoft.org/schema/mule/ee/cluster"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:mulerequester="http://www.mulesoft.org/schema/mule/mulerequester"
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/ftp http://www.mulesoft.org/schema/mule/ee/ftp/current/mule-ftp-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/mulerequester http://www.mulesoft.org/schema/mule/mulerequester/current/mule-mulerequester.xsd
http://www.mulesoft.org/schema/mule/ftp http://www.mulesoft.org/schema/mule/ftp/current/mule-ftp.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/ftplite http://www.mulesoft.org/schema/mule/ftplite/current/mule-ftplite.xsd">
    <byte-array-to-string-transformer name="Byte_Array_to_String" doc:name="Byte Array to String"/>
    <asynchronous-processing-strategy name="Asynchronous_Processing_Strategy" maxThreads="4" minThreads="1" doc:name="Asynchronous Processing Strategy"/>
    <validation:config name="Validation_Configuration" doc:name="Validation Configuration"/>

    <flow name="main" processingStrategy="synchronous" initialState="started"> 
        <amqp:inbound-endpoint queueName="${rabbit.queuename}" responseTimeout="10000" connector-ref="RabbitMQConnector" doc:name="RabbitMQ inbound"  transformer-refs="Byte_Array_to_String" numberOfChannels="1">
            <reconnect/>
        </amqp:inbound-endpoint>
        <set-variable variableName="message" value="#[payload]" doc:name="Set message"/>
        <flow-ref name="ingestByMessage" doc:name="ingestByMessage"/>
        
        <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <flow-ref name="sendErrorMessage" doc:name="sendErrorMessage"/>
            <choice doc:name="Choice">
                <when expression="#[flowVars.comment == null]">
                    <set-variable variableName="comment" value="#[exception.cause.message]" doc:name="Set comment"/>
                </when>
                <otherwise>
                    <expression-component doc:name="Do nothing"><![CDATA[// do nothing]]></expression-component>
                </otherwise>
            </choice>
            <choice doc:name="Choice">
                <when expression="#[flowVars.input.flow_id.equals(&quot;vrt.video.1&quot;) || flowVars.input.flow_id.equals(&quot;plantentuinmeise&quot;)]">
                    <expression-component doc:name="Do nothing"><![CDATA[// Do nothing]]></expression-component>
                </when>
                <otherwise>
                    <db:select config-ref="borndigital" doc:name="Check if a record with same local_id or filename+filepath combination or md5 already exists">
                        <db:parameterized-query><![CDATA[select *
from sips
where ((local_id = #[flowVars.local_id] and md5 is null)
		or (filename = #[flowVars.filename] and filepath = #[flowVars.filepath] and md5 is null)
		or (md5 = #[flowVars.md5metadata] and #[flowVars.md5metadata] != '')
		or (local_id = #[flowVars.local_id] and md5 = #[flowVars.md5metadata])
	)]]></db:parameterized-query>
                    </db:select>
                    <choice doc:name="Record found?">
                        <when expression="#[payload.size() &gt; 0]">
                            <db:update config-ref="borndigital" doc:name="Update existing record">
                                <db:parameterized-query><![CDATA[update sips
set "preingest_status" = 'NOK', comment = #[flowVars.comment], message = #[flowVars.message], organisation_id = #[flowVars.cp_id], "archive_status" = 'in_progress'
where id = #[payload[0].id]]]></db:parameterized-query>
                            </db:update>
                        </when>
                        <otherwise>
                            <db:insert config-ref="borndigital" doc:name="Insert into sips table as NOK">
                                <db:parameterized-query><![CDATA[INSERT INTO sips
(organisation, organisation_id, local_id, pid, md5, filename, filepath, host, comment, "preingest_status", message, "archive_status")
VALUES (#[flowVars.cp], #[flowVars.cp_id], #[flowVars.local_id], #[flowVars.pid], #[flowVars.md5metadata], #[flowVars.filenameEssence], #[flowVars.filepath], #[flowVars.host], #[flowVars.comment], 'NOK', #[flowVars.message], 'in_progress')]]></db:parameterized-query>
                            </db:insert>
                        </otherwise>
                    </choice>
                </otherwise>
            </choice>
            <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
        </catch-exception-strategy>
        
  
    </flow>
    <sub-flow name="ingestByMessage">
    <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <set-variable variableName="input" value="#[payload]" doc:name="Save POJO"></set-variable>
        <component class="utils.Utils" doc:name="Extract files"></component>
        <set-variable variableName="files" value="#[payload]" doc:name="Set files (with message metadata)"/>
        <flow-ref name="init_variables" doc:name="init_variables"/>
        <flow-ref name="check_filename_special_characters" doc:name="check_filename_special_characters"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.filename_contains_bad_characters]">
                <flow-ref name="move_files_for_correct_name" doc:name="move_files_for_correct_name"/>
            </when>
            <otherwise>
                <flow-ref name="PI_SIDECAR_FETCHED" doc:name="PI_SIDECAR_FETCHED"/>
                <flow-ref name="CLEAR_VALUES" doc:name="CLEAR_VALUES"/>
                <flow-ref name="PI_SET_LOCAL_ID" doc:name="PI_SET_LOCAL_ID"/>
                <flow-ref name="PI_SET_MD5" doc:name="PI_SET_MD5"/>
                <flow-ref name="CLEAR_VALUES" doc:name="CLEAR_VALUES"/>
                <flow-ref name="PI_SET_PID" doc:name="PI_SET_PID"/>
                <choice doc:name="Don't add to sips when vrt or plantentuinmeise">
                    <when expression="#[flowVars.input.flow_id.equals(&quot;vrt.video.1&quot;) || flowVars.input.flow_id.equals(&quot;plantentuinmeise&quot;)]">
                        <expression-component doc:name="Do nothing"><![CDATA[// do nothing]]></expression-component>
                    </when>
                    <otherwise>
                        <flow-ref name="ADD_TO_SIPS" doc:name="ADD_TO_SIPS"/>
                    </otherwise>
                </choice>
                <flow-ref name="CLEAR_VALUES" doc:name="CLEAR_VALUES"/>
                <choice doc:name="SIP contains collateral (e.g. subtitle)?">
                    <when expression="flowVars.files.get(&quot;collateral&quot;) != null">
                        <flow-ref name="SEND_COLLATERALS" doc:name="SEND_COLLATERALS"/>
                    </when>
                    <otherwise>
                        <expression-component doc:name="No collateral, do nothing"><![CDATA[// No collateral, do nothing]]></expression-component>
                    </otherwise>
                </choice>
                <flow-ref name="CLEAR_VALUES" doc:name="CLEAR_VALUES"/>
                <choice doc:name="Which flow_id?">
                    <when expression="#[flowVars.input.flow_id.equals(&quot;vrt.video.1&quot;)]">
                        <flow-ref name="PI_METADATA_MAPPING_VRT" doc:name="PI_METADATA_MAPPING_VRT"/>
                    </when>
                    <when expression="#[flowVars.input.flow_id.equals(&quot;provant&quot;)]">
                        <flow-ref name="PI_METADATA_MAPPING_PROVANT" doc:name="PI_METADATA_MAPPING_PROVANT"/>
                    </when>
                    <when expression="#[flowVars.input.flow_id.equals(&quot;plantentuinmeise&quot;)]">
                        <flow-ref name="PI_METADATA_MAPPING_MEISE" doc:name="PI_METADATA_MAPPING_MEISE"/>
                    </when>
                    <when expression="#[flowVars.input.flow_id.equals(&quot;vlaamsparlement&quot;)]">
                        <flow-ref name="PI_METADATA_MAPPING_VLAAMS_PARLEMENT" doc:name="PI_METADATA_MAPPING_VLAAMS_PARLEMENT"/>
                    </when>
                    <otherwise>
                        <logger message="Generic mapping from MHEM, dc_terms or ebu_core" level="INFO" doc:name="Generic mapping from MHEM, dc_terms or ebu_core"/>
                        <flow-ref name="PI_METADATA_MAPPING_MHEM" doc:name="PI_METADATA_MAPPING_MHEM"/>
                        <flow-ref name="metadata_corrections" doc:name=""/>
                        <logger message="Todo:validate with XSD" level="INFO" doc:name="Todo: validate with XSD"/>
                    </otherwise>
                </choice>
                <flow-ref name="CLEAR_VALUES" doc:name="CLEAR_VALUES"/>
                <choice doc:name="Choice">
                    <when expression="#[flowVars.input.flow_id.equals(&quot;vrt.video.1&quot;)]">
                        <flow-ref name="PI_SIP_DELIVERY_VRT" doc:name="PI_SIP_DELIVERY_VRT"/>
                    </when>
                    <when expression="#[flowVars.input.flow_id.equals(&quot;provant&quot;)]">
                        <flow-ref name="PI_SIP_DELIVERY_PROVANT" doc:name="PI_SIP_DELIVERY_PROVANT"/>
                    </when>
                    <when expression="#[flowVars.input.flow_id.equals(&quot;plantentuinmeise&quot;)]">
                        <flow-ref name="PI_SIP_DELIVERY_MEISE" doc:name="PI_SIP_DELIVERY_MEISE"/>
                    </when>
                    <otherwise>
                        <flow-ref name="PI_SIP_DELIVERY_GENERIC_ESSENCE" doc:name="PI_SIP_DELIVERY_GENERIC_ESSENCE"/>
                        <flow-ref name="PI_SIP_DELIVERY_GENERIC_SIDECAR" doc:name="PI_SIP_DELIVERY_GENERIC_SIDECAR"/>
                    </otherwise>
                </choice>
                <flow-ref name="CLEAR_VALUES" doc:name="CLEAR_VALUES"/>
                <choice doc:name="Don't update sips for vrt and meise">
                    <when expression="#[flowVars.input.flow_id.equals(&quot;vrt.video.1&quot;) || flowVars.input.flow_id.equals(&quot;plantentuinmeise&quot;)]">
                        <expression-component doc:name="Do nothing"><![CDATA[// do nothing]]></expression-component>
                    </when>
                    <otherwise>
                        <db:update config-ref="borndigital" doc:name="Set preingest_status to OK">
                            <db:parameterized-query><![CDATA[update sips
set "preingest_status" = 'OK', local_id = #[flowVars.local_id], comment = 'Met succes verstuurd naar ingestfolder MAM', message = #[flowVars.message], organisation = #[flowVars.cp], organisation_id = #[flowVars.cp_id], archive_status = 'in_progress'
where filename = #[flowVars.filenameEssence] and filepath = #[flowVars.filepath] and host = #[flowVars.host] and md5 = #[flowVars.md5metadata]]]></db:parameterized-query>
                        </db:update>
                    </otherwise>
                </choice>
            </otherwise>
        </choice>
                <logger message="Done with local_id #[flowVars.local_id] and pid #[flowVars.pid]" level="INFO" doc:name="Done"/>
        
    </sub-flow>
    <sub-flow name="init_variables">
        <set-variable variableName="cp" value="#[flowVars.input.cp_name]" doc:name="Set cp"/>
        <set-variable variableName="filenameWithoutExtension" value="#[flowVars.files.essence[0].file_name.split(&quot;\\.&quot;)[0]]" doc:name="Set filenameWithoutExtension"/>
        <set-variable variableName="filenameEssence" value="#[flowVars.files.essence[0].file_name]" doc:name="Set filenameEssence"/>
        <set-variable variableName="extension" value="#[flowVars.filenameEssence.split(&quot;\\.(?=[^\\.]+$)&quot;).size() == 2 ? flowVars.filenameEssence.split(&quot;\\.(?=[^\\.]+$)&quot;)[1] : &quot;&quot;]" doc:name="Set extension"/>
        <set-variable variableName="filepath" value="#[flowVars.files.essence[0].file_path]" doc:name="Set filepath"/>
        <set-variable variableName="host" value="#[flowVars.input.server]" doc:name="Set host"/>
        <set-variable variableName="md5calculated" value="#[flowVars.files.essence[0].md5]" doc:name="Set md5calculated"/>
        <set-variable variableName="sourceUsername" value="#[flowVars.input.username]" doc:name="Set sourceUsername"/>
        <set-variable variableName="sourcePassword" value="#[flowVars.input.password]" doc:name="Set sourcePassword"/>
        <choice doc:name="When not a custom CP, use flow_id as CP_id">
            <when expression="#[flowVars.input.flow_id.equals(&quot;vrt.video.1&quot;) || flowVars.input.flow_id.equals(&quot;provant&quot;) || flowVars.input.flow_id.equals(&quot;plantentuinmeise&quot;) || flowVars.input.flow_id.equals(&quot;vlaamsparlement&quot;) || flowVars.input.flow_id.equals(&quot;Medialaan&quot;)]">
                <flow-ref name="get_cp_id" doc:name="get_cp_id"/>
                <set-variable variableName="cp_id" value="#[payload]" doc:name="Set cp_id"/>
            </when>
            <otherwise>
                <set-variable variableName="cp_id" value="#[flowVars.input.flow_id]" doc:name="Set cp_id with flow_id"/>
            </otherwise>
        </choice>
    </sub-flow>
    <sub-flow name="PI_SET_PID">
        <set-variable variableName="eventName" value="PI_SET_PID" doc:name="Set eventName"/>
        <choice doc:name="SIP from VRT, Meise or generic?">
            <when expression="#[flowVars.input.flow_id.equals(&quot;vrt.video.1&quot;)]">
                <set-payload value="#[flowVars.incomingXml]" doc:name="Set Payload to sidecar"/>
                <set-variable variableName="correlation_id" value="#[xpath3('//correlationId/text()')]" doc:name="Set correlation_id"/>
                <db:select config-ref="borndigital" doc:name="Get info from vrt_message_buffer">
                    <db:parameterized-query><![CDATA[SELECT * 
FROM ${db.buffer} 
WHERE correlation_id = #[flowVars.correlation_id];]]></db:parameterized-query>
                </db:select>
                <set-variable variableName="pid" value="#[payload[0].pid]" doc:name="Set pid"/>
                <set-variable variableName="origin" value="#[payload[0].origin]" doc:name="Set origin"/>
                <set-variable variableName="status" value="#[&quot;New file from VRT&quot;]" doc:name="Set status"/>
            </when>
            <when expression="#[flowVars.input.flow_id.equals(&quot;plantentuinmeise&quot;)]">
                <set-payload value="#[flowVars.incomingXml]" doc:name="Set Payload to sidecar"/>
                <set-variable variableName="pid" value="#[xpath3('//PID/text()')]" doc:name="Set pid"/>
                <set-variable variableName="md5" value="#[xpath3('//md5/text()')]" doc:name="Set md5"/>
                <set-variable variableName="filepath" value="#[xpath3('//file_path/text()')]" doc:name="Set filepath"/>
                <set-variable variableName="filename" value="#[xpath3('//file_name/text()')]" doc:name="Set filename"/>
                <set-variable variableName="status" value="#[&quot;New file from Meise&quot;]" doc:name="Set status"/>
            </when>
            <otherwise >
                <db:select config-ref="borndigital" doc:name="Check if record already exists for this md5 (and cp)">
                    <db:parameterized-query><![CDATA[select *
from sips
where ((local_id = #[flowVars.local_id] and md5 is null)
		or (filename = #[flowVars.filename] and filepath = #[flowVars.filepath] and md5 is null)
		or (md5 = #[flowVars.md5metadata] and #[flowVars.md5metadata] != '')
		or (local_id = #[flowVars.local_id] and md5 = #[flowVars.md5metadata])
	)]]></db:parameterized-query>
                </db:select>
                <choice doc:name="Found?">
                    <when expression="#[payload.size()&gt;0]">
                        <logger message="md5 already present" level="INFO" doc:name="md5 already present"/>
                        <choice doc:name="Has already pid?">
                            <when expression="#[payload[0].pid == null || payload[0].pid == &quot;&quot;]">
                                <flow-ref name="PI_GET_PID" doc:name="PI_GET_PID"/>
                            </when>
                            <otherwise>
                                <set-variable variableName="pid" value="#[payload[0].pid]" doc:name="Set pid by re-using"/>
                            </otherwise>
                        </choice>
                    </when>
                    <otherwise>
                        <logger level="INFO" doc:name="new item"/>
                        <flow-ref name="PI_GET_PID" doc:name="PI_GET_PID"/>
                    </otherwise>
                </choice>
                <set-variable variableName="status" value="#[&quot;new file added with pid: &quot; + flowVars.pid]" doc:name="Set status"/>
            </otherwise>
        </choice>
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="#[&quot;PID: &quot; + flowVars.pid]" doc:name="Set comment"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <sub-flow name="PI_GET_PID">
        <until-successful maxRetries="1000" synchronous="true" doc:name="Until Successful">
            <http:request config-ref="PID_webservice" path="${pid.path}" method="GET" doc:name="Request PID">
                <http:success-status-code-validator values="200"/>
            </http:request>
        </until-successful>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <json:json-to-object-transformer returnClass="answer.PIDIdResponse[]" doc:name="JSON to Object"/>
        <set-variable variableName="pid" value="#[payload[0].id]" doc:name="Set pid"/>
    </sub-flow>
    <flow name="PI_SIDECAR_FETCHED">
        <set-variable variableName="eventName" value="PI_SIDECAR_FETCHED" doc:name="Set eventName"/>
        <until-successful maxRetries="3" millisBetweenRetries="5000" synchronous="true" doc:name="Until Successful">
            <mulerequester:request resource="ftp://#[flowVars.input.username]:#[flowVars.input.password]@#[flowVars.input.server]/#[flowVars.files['sidecar'][0].file_path]/#[flowVars.files['sidecar'][0].file_name]?connector=FTP" timeout="10000" doc:name="Get XML file from FTP"/>
        </until-successful>
        <byte-array-to-object-transformer doc:name="Byte Array to Object"/>
        <set-variable variableName="incomingXml" value="#[payload]" doc:name="Set incomingXml"/>
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="#[&quot;Sidecar is succesfully read.&quot;]" doc:name="Set comment"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <choice doc:name="Do nothing when vrt or meise">
                <when expression="#[flowVars.input.flow_id.equals(&quot;vrt.video.1&quot;) || flowVars.input.flow_id.equals(&quot;plantentuinmeise&quot;)]">
                    <expression-component doc:name="Do nothing"><![CDATA[// do nothing]]></expression-component>
                </when>
                <otherwise>
                    <db:insert config-ref="borndigital" doc:name="Insert into sips table as NOK">
                        <db:parameterized-query><![CDATA[INSERT INTO sips
(organisation, filename, filepath, host, comment, preingest_status, organisation_id, archive_status)
VALUES (#[flowVars.cp], #[flowVars.filenameEssence], #[flowVars.filepath], #[flowVars.host], #[flowVars.comment], 'NOK', #[flowVars.cp_id], 'in_progress')]]></db:parameterized-query>
                    </db:insert>
                </otherwise>
            </choice>
            <set-variable variableName="result" value="#[&quot;NOK&quot;]" doc:name="Set result NOK"/>
            <set-variable variableName="comment" value="#[&quot;Failed to read sidecar&quot;]" doc:name="Set comment (Failed to read sidecar)"/>
            <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
            <validation:is-true config-ref="Validation_Configuration" expression="#[false]" doc:name="Throw exception so main flow stops"/>
        </catch-exception-strategy>
    </flow>
    <flow name="PI_SET_LOCAL_ID">
        <set-variable variableName="eventName" value="PI_SET_LOCAL_ID" doc:name="Set eventName"/>
        <set-payload value="#[flowVars.incomingXml]" doc:name="Set Payload to sidecar"/>
        <choice doc:name="Which flow_id?">
            <when expression="#[flowVars.input.flow_id.equals(&quot;vrt.video.1&quot;)]">
                <logger message="local_id VRT" level="INFO" doc:name="VRT"/>
                <set-variable variableName="mediaId" value="#[xpath3(&quot;//mediaId/text()&quot;)]" doc:name="Set mediaId"/>
                <set-variable variableName="local_id" value="#[flowVars.mediaId]" doc:name="Set local_id equal to mediaId"/>
            </when>
            <when expression="#[flowVars.input.flow_id.equals(&quot;provant&quot;)]">
                <logger message="local_id Provant" level="INFO" doc:name="Provant"/>
                <set-variable variableName="local_id" value="#[xpath3(&quot;//custom_uuid/text()&quot;)]" doc:name="Set local_id from custom_uuid"/>
            </when>
            <when expression="#[flowVars.input.flow_id.equals(&quot;plantentuinmeise&quot;)]">
                <logger message="Local id Meise" level="INFO" doc:name="Meise"/>
                <set-variable variableName="local_id" value="#[xpath3(&quot;//dc_identifier_cpid/text()&quot;)]" doc:name="Set local_id from dc_identifier_cpid (legacy)"/>
            </when>
            <when expression="#[flowVars.cp.equals(&quot;Medialaan&quot;)]">
                <logger message="Local id Medialaan" level="INFO" doc:name="Medialaan"/>
                <set-variable variableName="local_id" value="#[xpath3('//Meta[@name=&quot;FILE&quot;]/text()')]" doc:name="Set local_id with value of FILE"/>
            </when>
            <otherwise>
                <logger message="Generic mapping from MHEM, dc_terms or ebu_core. Set local_id from dc_identifier_localid" level="INFO" doc:name="Generic mapping from MHEM, dc_terms or ebu_core"/>
                <set-variable variableName="local_id" value="#[xpath3(&quot;//dc_identifier_localid/text()&quot;)]" doc:name="Set local_id from dc_identifier_localid"/>
            </otherwise>
        </choice>
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="#[&quot;local_id: &quot; + flowVars.local_id]" doc:name="Set comment (local_id)"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </flow>
    <sub-flow name="PI_SET_MD5">
        <set-variable variableName="eventName" value="PI_SET_MD5" doc:name="Set eventName"/>
        <set-variable variableName="eventName" value="PI_MD5_CHECK" doc:name="Set Name"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.cp.equals(&quot;Medialaan&quot;)]">
                <set-variable variableName="md5metadata" value="#[xpath3('//Meta[@name=&quot;BROWSE_HASH&quot;]/text()', flowVars.incomingXml)]" doc:name="Set md5metadata from BROWSE_HASH for Medialaan"/>
            </when>
            <otherwise>
                <set-variable variableName="md5metadata" value="#[xpath3('//md5/text()', flowVars.incomingXml)]" doc:name="Set md5metadata"/>
            </otherwise>
        </choice>
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="#[&quot;MD5: &quot; + flowVars.md5metadata]" doc:name="Set comment"/>
                <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <flow name="ADD_TO_SIPS">
        <set-variable variableName="eventName" value="PI_ADD_TO_SIPS" doc:name="Set eventName"/>
    	<db:select config-ref="borndigital" doc:name="Check if a record with same local_id or filename+filepath combination or md5 already exists">
            <db:parameterized-query><![CDATA[select *
from sips
where ((local_id = #[flowVars.local_id] and md5 is null)
		or (filename = #[flowVars.filename] and filepath = #[flowVars.filepath] and md5 is null)
		or (md5 = #[flowVars.md5metadata] and #[flowVars.md5metadata] != '')
		or (local_id = #[flowVars.local_id] and md5 = #[flowVars.md5metadata])
	)]]></db:parameterized-query>
                        </db:select>
                        <choice doc:name="Found?">
                            <when expression="#[payload.size()&gt;0]">
                                <db:update config-ref="borndigital" doc:name="Update existing record">
                    <db:parameterized-query><![CDATA[update sips
set filename = #[flowVars.filenameEssence], host = #[flowVars.host], filepath = #[flowVars.filepath], 
	local_id = #[flowVars.local_id], md5 = #[flowVars.md5metadata], pid = #[flowVars.pid], organisation_id = #[flowVars.cp_id], preingest_status = 'in_progress', archive_status = 'in_progress'
where id = #[payload[0].id]]]></db:parameterized-query>
                                </db:update>
                            </when>
                            <otherwise>
                                <db:insert config-ref="borndigital" doc:name="Insert new record into sips table">
                    <db:parameterized-query><![CDATA[INSERT INTO sips
(local_id, md5, organisation, pid, filename, filepath, host, organisation_id, archive_status, preingest_status)
VALUES (#[flowVars.local_id], #[flowVars.md5metadata], #[flowVars.cp], #[flowVars.pid], #[flowVars.filenameEssence], #[flowVars.filepath], #[flowVars.host], #[flowVars.cp_id], 'in_progress', 'in_progress')]]></db:parameterized-query>
                                </db:insert>
                            </otherwise>
                        </choice>
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="#[&quot;Record updated/added to sips&quot;]" doc:name="Set comment"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </flow>
    <sub-flow name="CLEAR_VALUES">
        <remove-variable variableName="comment" doc:name="Clear Comment"/>
        <remove-variable variableName="result" doc:name="Clear result"/>
    </sub-flow>
    <sub-flow name="SEND_COLLATERALS">
        <set-variable variableName="relations" value="#[new ArrayList()]" doc:name="Init relations"/>
        <foreach collection="#[flowVars.files.collateral]" doc:name="For Each collateral">
            <set-variable variableName="filenameCollateral" value="#[payload.file_name]" doc:name="Set filenameCollateral"/>
            <logger message="Contains subtitles" level="INFO" doc:name="Contains collateral"/>
            <set-variable variableName="extension_collateral" value="#[flowVars.filenameCollateral.split(&quot;\\.(?=[^\\.]+$)&quot;).size() == 2 ? flowVars.filenameCollateral.split(&quot;\\.(?=[^\\.]+$)&quot;)[1] : &quot;&quot;]" doc:name="Set extension_collateral"/>
            <set-variable variableName="pid_collateral" value="#[flowVars.pid + '_' + flowVars.extension_collateral]" doc:name="Set pid_collateral"/>
            <expression-component doc:name="Add pid_collateral to relations"><![CDATA[#[flowVars.relations.add(flowVars.pid_collateral)]]]></expression-component>
            <set-variable variableName="cp_mediahaven" value="#[flowVars.cp.toLowerCase()]" doc:name="Set cp_mediahaven"/>
            <dw:transform-message doc:name="Build fxp request">
                <dw:input-variable variableName="currentItem"/>
                <dw:set-payload><![CDATA[%dw 1.0
%input payload application/java
%output application/json
---
{
	"destination_file": flowVars.pid_collateral ++ '.' ++ flowVars.extension_collateral,
    "destination_host": p('ftpDestinationCollateral.host'),
    "destination_password": p('ftpDestinationCollateral.password'),
    "destination_path": "/" ++ flowVars.cp_mediahaven ++ "/DISK-SHARE-EVENTS",
    "destination_user": p('ftpDestinationCollateral.username'),
    "source_file": flowVars.filenameCollateral,
    "source_host": flowVars.host,
    "source_password": flowVars.sourcePassword,
    "source_path": flowVars.filepath,
    "source_user": flowVars.sourceUsername,
    "move": false
}]]></dw:set-payload>
            </dw:transform-message>
            <byte-array-to-string-transformer doc:name="Byte Array to String"/>
            <amqp:outbound-endpoint queueName="fxp_requests" responseTimeout="10000" exchange-pattern="request-response" connector-ref="RabbitMQConnectorFXP" doc:name="Send message to fxp_requests"/>
            <logger message="Done sending subtitle with pid #[flowVars.pid_collateral] and local_id #[flowVars.local_id]" level="INFO" doc:name="Done sending subtitle"/>
        </foreach>
    </sub-flow>
    <sub-flow name="check_filename_special_characters">
        <set-variable variableName="filename_contains_bad_characters" value="#[flowVars.filenameWithoutExtension.matches(&quot;.*[\\[\\]()#&#235;+%&#233;&#8217;].*&quot;)]" doc:name="Set filename_contains_bad_characters (e.g.: ()#&#235;+%)"/>
        <set-variable variableName="state" value="BAD_CHAR_CHECKED" doc:name="Set state (BAD_CHAR_CHECKED)"/>
        <logger message="BAD_CHAR_CHECKED: #[flowVars.filename_contains_bad_characters]" level="INFO" doc:name="BAD_CHAR_CHECKED"/>
    </sub-flow>
    <sub-flow name="move_files_for_correct_name">
        <set-variable variableName="filename_corrected" value="#[flowVars.filenameWithoutExtension.replaceAll(&quot;\\(&quot;,&quot; &quot;).replaceAll(&quot;\\)&quot;,&quot; &quot;).replaceAll(&quot;#&quot;,&quot; &quot;).replaceAll(&quot;&#235;&quot;,&quot;e&quot;).replaceAll(&quot;&#233;&quot;,&quot;e&quot;).replaceAll(&quot;\\+&quot;,&quot;&quot;).replaceAll(&quot;\\%&quot;,&quot;&quot;).replaceAll(&quot;&#8217;&quot;,&quot;&quot;).replaceAll(&quot;\\[&quot;,&quot; &quot;).replaceAll(&quot;\\]&quot;,&quot; &quot;).trim()]" doc:name="Set filename_corrected"/>
        <set-variable variableName="destinationpath" value="#[flowVars.filepath.substring(0, flowVars.filepath.lastIndexOf('/'))]" doc:name="Set destinationpath to source folder one higher"/>
        <dw:transform-message doc:name="Build move request for sidecar">
            <dw:input-variable variableName="currentItem"/>
            <dw:set-payload><![CDATA[%dw 1.0
	%output application/json
	---
	{
		"source_name": flowVars.filenameWithoutExtension ++ ".xml",
		"destination_name": flowVars.filename_corrected ++ ".xml",
		"source_path": flowVars.filepath,
		"destination_path": flowVars.destinationpath,
	    "host": flowVars.host,
	    "username": flowVars.sourceUsername,
	    "password": flowVars.sourcePassword,
	    "correlation_id": ""
	}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <amqp:outbound-endpoint queueName="move_requests" responseTimeout="10000" connector-ref="RabbitMQConnector" doc:name="Send message to move_requests">
            <reconnect-forever/>
        </amqp:outbound-endpoint>
        <dw:transform-message doc:name="Build move request for essence">
            <dw:input-variable variableName="currentItem"/>
            <dw:set-payload><![CDATA[%dw 1.0
	%output application/json
	---
	{
		"source_name": flowVars.filenameWithoutExtension ++ "." ++ flowVars.extension,
		"destination_name": flowVars.filename_corrected ++ "." ++ flowVars.extension,
		"source_path": flowVars.filepath,
		"destination_path": flowVars.destinationpath,
	    "host": flowVars.host,
	    "username": flowVars.sourceUsername,
	    "password": flowVars.sourcePassword,
	    "correlation_id": ""
	}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <amqp:outbound-endpoint queueName="move_requests" responseTimeout="10000" connector-ref="RabbitMQConnector" doc:name="Send message to move_requests">
            <reconnect-forever/>
        </amqp:outbound-endpoint>
        <set-variable variableName="state" value="FILES_MOVED" doc:name="Set state (FILES_MOVED)"/>
        <logger message="FILES_MOVED" level="INFO" doc:name="FILES_MOVED"/>
    </sub-flow>

</mule>