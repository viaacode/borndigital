<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:ftp="http://www.mulesoft.org/schema/mule/ee/ftp" xmlns:cluster="http://www.mulesoft.org/schema/mule/ee/cluster"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:mulerequester="http://www.mulesoft.org/schema/mule/mulerequester"
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/ftp http://www.mulesoft.org/schema/mule/ee/ftp/current/mule-ftp-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/mulerequester http://www.mulesoft.org/schema/mule/mulerequester/current/mule-mulerequester.xsd
http://www.mulesoft.org/schema/mule/ftp http://www.mulesoft.org/schema/mule/ftp/current/mule-ftp.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
    <byte-array-to-string-transformer name="Byte_Array_to_String" doc:name="Byte Array to String"/>
    <asynchronous-processing-strategy name="Asynchronous_Processing_Strategy" maxThreads="4" minThreads="1" doc:name="Asynchronous Processing Strategy"/>
    <validation:config name="Validation_Configuration" doc:name="Validation Configuration"/>    
	<!-- Special File Connector that does not auto-delete files once read -->

    <flow name="moveMP4Flow" processingStrategy="synchronous" initialState="started"> 
        <amqp:inbound-endpoint queueName="${rabbit.queuename}" responseTimeout="10000" connector-ref="RabbitMQConnector" doc:name="RabbitMQ inbound"  transformer-refs="Byte_Array_to_String" numberOfChannels="1">
            <reconnect/>
        </amqp:inbound-endpoint>
        <set-variable variableName="message" value="#[payload]" doc:name="Set message"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
  
        <set-variable variableName="input" value="#[payload]" doc:name="Save POJO"></set-variable>
        <component class="utils.Utils" doc:name="Extract files"></component>
        <set-variable variableName="files" value="#[payload]" doc:name="Set files (with message metadata)"/>
        <flow-ref name="init_variables" doc:name="init_variables"/>
        <flow-ref name="PI_SIDECAR_CHECKED" doc:name="PI_SIDECAR_CHECKED"/>
        <flow-ref name="CLEAR_VALUES" doc:name="CLEAR_VALUES"/>
        <flow-ref name="PI_SET_LOCAL_ID" doc:name="PI_SET_LOCAL_ID"/>
        <flow-ref name="CLEAR_VALUES" doc:name="CLEAR_VALUES"/>
        <flow-ref name="PI_SET_MD5" doc:name="PI_SET_MD5"/>
        <flow-ref name="CLEAR_VALUES" doc:name="CLEAR_VALUES"/>
        <flow-ref name="PI_SET_PID" doc:name="PI_SET_PID"/>
        <choice doc:name="Don't add to sips when vrt or plantentuinmeise">
            <when expression="#[flowVars.input.flow_id.equals(&quot;vrt.video.1&quot;) || flowVars.input.flow_id.equals(&quot;plantentuinmeise&quot;)]">
                <logger level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <flow-ref name="ADD_TO_SIPS" doc:name="ADD_TO_SIPS"/>
            </otherwise>
        </choice>
        <flow-ref name="CLEAR_VALUES" doc:name="CLEAR_VALUES"/>
        <choice doc:name="Which flow_id?">
            <when expression="#[flowVars.input.flow_id.equals(&quot;vrt.video.1&quot;)]">
                <flow-ref name="PI_METADATA_MAPPING_VRT" doc:name="PI_METADATA_MAPPING_VRT"/>
            </when>
            <when expression="#[flowVars.input.flow_id.equals(&quot;provant&quot;)]">
                <flow-ref name="PI_METADATA_MAPPING_PROVANT" doc:name="PI_METADATA_MAPPING_PROVANT"/>
            </when>
            <when expression="#[flowVars.input.flow_id.equals(&quot;plantentuinmeise&quot;)]">
                <flow-ref name="PI_METADATA_MAPPING_MEISE" doc:name="PI_METADATA_MAPPING_MEISE"/>
            </when>
            <when expression="#[flowVars.input.flow_id.equals(&quot;vlaamsparlement&quot;)]">
                <flow-ref name="PI_METADATA_MAPPING_VLAAMS_PARLEMENT" doc:name="PI_METADATA_MAPPING_VLAAMS_PARLEMENT"/>
            </when>
            <otherwise>
                <logger message="Generic mapping from MHEM, dc_terms or ebu_core" level="INFO" doc:name="Generic mapping from MHEM, dc_terms or ebu_core"/>
                <flow-ref name="PI_METADATA_MAPPING_MHEM" doc:name="PI_METADATA_MAPPING_MHEM"/>
            </otherwise>
        </choice>
        <flow-ref name="CLEAR_VALUES" doc:name="CLEAR_VALUES"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.input.flow_id.equals(&quot;vrt.video.1&quot;)]">
                <flow-ref name="PI_SIP_DELIVERY_VRT" doc:name="PI_SIP_DELIVERY_VRT"/>
            </when>
            <when expression="#[flowVars.input.flow_id.equals(&quot;provant&quot;)]">
                <flow-ref name="PI_SIP_DELIVERY_PROVANT" doc:name="PI_SIP_DELIVERY_PROVANT"/>
            </when>
            <when expression="#[flowVars.input.flow_id.equals(&quot;plantentuinmeise&quot;)]">
                <flow-ref name="PI_SIP_DELIVERY_MEISE" doc:name="PI_SIP_DELIVERY_MEISE"/>
            </when>
            <otherwise>
                <flow-ref name="PI_SIP_DELIVERY_SIDECAR" doc:name="PI_SIP_DELIVERY_SIDECAR"/>
            </otherwise>
        </choice>
        <flow-ref name="CLEAR_VALUES" doc:name="CLEAR_VALUES"/>
        <db:update config-ref="POSTGRESQL_Connection" doc:name="Set preingest_status to OK">
            <db:parameterized-query><![CDATA[update sips
set "preingest_status" = 'OK', local_id = #[flowVars.local_id], comment = 'Met succes verstuurd naar ingestfolder MAM'
where organisation = #[flowVars.cp] and md5 = #[flowVars.md5metadata]]]></db:parameterized-query>
        </db:update>
        <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
        <logger message="Done with local_id #[flowVars.local_id] and pid #[flowVars.pid]" level="INFO" doc:name="Done"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <flow-ref name="sendErrorMessage" doc:name="sendErrorMessage"/>
            <db:select config-ref="POSTGRESQL_Connection" doc:name="Check if a record with same local_id or filename+filepath combination or md5 already exists">
                <db:parameterized-query><![CDATA[select *
from sips
where organisation = #[flowVars.cp]
	and ((local_id = #[flowVars.local_id] and md5 is null)
		or (filename = #[flowVars.filename] and filepath = #[flowVars.filepath] and md5 is null)
		or md5 = #[flowVars.md5metadata]
	)]]></db:parameterized-query>
            </db:select>
            <choice doc:name="Record found?">
                <when expression="#[payload.size() &gt; 0]">
                    <db:update config-ref="POSTGRESQL_Connection" doc:name="Update existing record">
                        <db:parameterized-query><![CDATA[update sips
set "preingest_status" = 'NOK', comment = #[flowVars.comment]
where id = #[payload[0].id]]]></db:parameterized-query>
                    </db:update>
                </when>
                <otherwise>
                    <db:insert config-ref="POSTGRESQL_Connection" doc:name="Insert into sips table as NOK">
                        <db:parameterized-query><![CDATA[INSERT INTO sips
(organisation, local_id, pid, md5, filename, filepath, host, comment, "preingest_status")
VALUES (#[flowVars.cp], #[flowVars.local_id], #[flowVars.pid], #[flowVars.md5metadata], #[flowVars.filenameEssence], #[flowVars.filepath], #[flowVars.host], #[flowVars.comment], 'NOK')]]></db:parameterized-query>
                    </db:insert>
                </otherwise>
            </choice>
        </catch-exception-strategy>
        
  
    </flow>
    <sub-flow name="init_variables">
        <set-variable variableName="cp" value="#[flowVars.input.cp_name]" doc:name="Set cp"/>
        <set-variable variableName="filenameWithoutExtension" value="#[flowVars.files.essence.file_name.split(&quot;\\.&quot;)[0]]" doc:name="Set filenameWithoutExtension"/>
        <set-variable variableName="filenameEssence" value="#[flowVars.files.essence.file_name]" doc:name="Set filenameEssence"/>
        <set-variable variableName="extension" value="#[flowVars.filenameEssence.split(&quot;\\.(?=[^\\.]+$)&quot;)[1]]" doc:name="Set extension"/>
        <set-variable variableName="filepath" value="#[flowVars.files.essence.file_path]" doc:name="Set filepath"/>
        <set-variable variableName="host" value="#[flowVars.input.server]" doc:name="Set host"/>
        <set-variable variableName="md5calculated" value="#[flowVars.files.essence.md5]" doc:name="Set md5calculated"/>
        <set-variable variableName="sourceUsername" value="#[flowVars.input.username]" doc:name="Set sourceUsername"/>
        <set-variable variableName="sourcePassword" value="#[flowVars.input.password]" doc:name="Set sourcePassword"/>
    </sub-flow>
    <sub-flow name="PI_SET_PID">
        <set-variable variableName="eventName" value="PI_SIP_DETECTED" doc:name="Set eventName"/>
        <choice doc:name="SIP from VRT, Meise or generic?">
            <when expression="#[flowVars.input.flow_id.equals(&quot;vrt.video.1&quot;)]">
                <set-variable variableName="correlationid" value="#[xpath3('//correlationId/text()')]" doc:name="Set correlationid"/>
                <db:select config-ref="POSTGRESQL_Connection" doc:name="Get info from vrt_message_buffer">
                    <db:parameterized-query><![CDATA[SELECT * 
FROM ${db.buffer} 
WHERE correlation_id = #[flowVars.correlationid];]]></db:parameterized-query>
                </db:select>
                <set-variable variableName="pid" value="#[payload[0].pid]" doc:name="Set pid"/>
                <set-variable variableName="origin" value="#[payload[0].origin]" doc:name="Set origin"/>
                <set-variable variableName="filename" value="#[flowVars.pid + '.' + String.format(&quot;%03d&quot;, payload.size()) + '.' + flowVars.type + '.' + flowVars.extension]" doc:name="Set filename"/>
                <set-variable variableName="status" value="#[&quot;New file from VRT&quot;]" doc:name="Set status"/>
            </when>
            <when expression="#[flowVars.input.flow_id.equals(&quot;plantentuinmeise&quot;)]">
                <set-variable variableName="pid" value="#[xpath3('//PID/text()')]" doc:name="Set pid"/>
                <set-variable variableName="md5" value="#[xpath3('//md5/text()')]" doc:name="Set md5"/>
                <set-variable variableName="filepath" value="#[xpath3('//file_path/text()')]" doc:name="Set filepath"/>
                <set-variable variableName="filename" value="#[xpath3('//file_name/text()')]" doc:name="Set filename"/>
                <set-variable variableName="status" value="#[&quot;New file from Meise&quot;]" doc:name="Set status"/>
            </when>
            <otherwise >
                <db:select config-ref="POSTGRESQL_Connection" doc:name="Check if record already exists for this md5 (and cp)">
                    <db:parameterized-query><![CDATA[select *
from sips
where organisation = #[flowVars.cp]
	and ((local_id = #[flowVars.local_id] and md5 is null)
		or (filename = #[flowVars.filename] and filepath = #[flowVars.filepath] and md5 is null)
		or md5 = #[flowVars.md5metadata]
	)]]></db:parameterized-query>
                </db:select>
                <choice doc:name="Found?">
                    <when expression="#[payload.size()&gt;0]">
                        <logger message="md5 already present" level="INFO" doc:name="md5 already present"/>
                        <choice doc:name="Has already pid?">
                            <when expression="#[payload[0].pid == null || payload[0].pid == &quot;&quot;]">
                                <flow-ref name="PI_GET_PID" doc:name="PI_GET_PID"/>
                            </when>
                            <otherwise>
                                <set-variable variableName="pid" value="#[payload[0].pid]" doc:name="Set pid by re-using"/>
                            </otherwise>
                        </choice>
                    </when>
                    <otherwise>
                        <logger level="INFO" doc:name="new item"/>
                        <flow-ref name="PI_GET_PID" doc:name="PI_GET_PID"/>
                    </otherwise>
                </choice>
                <set-variable variableName="status" value="#[&quot;new file added with pid: &quot; + flowVars.pid]" doc:name="Set status"/>
            </otherwise>
        </choice>
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="#[flowVars.status]" doc:name="Set comment"/>
        <foreach collection="#[flowVars.files]" doc:name="For Each">
            <set-variable variableName="comment" value="#[flowVars.comment + &quot;\n&quot; + payload.file_path +  payload.file_name + &quot;, &quot; + payload.md5]" doc:name="Append file info to comment"/>
        </foreach>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <sub-flow name="PI_GET_PID">
        <until-successful maxRetries="1000" synchronous="true" doc:name="Until Successful">
            <http:request config-ref="PID_webservice" path="${pid.path}" method="GET" doc:name="Request PID">
                <http:success-status-code-validator values="200"/>
            </http:request>
        </until-successful>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <json:json-to-object-transformer returnClass="answer.PIDIdResponse[]" doc:name="JSON to Object"/>
        <set-variable variableName="pid" value="#[payload[0].id]" doc:name="Set pid"/>
    </sub-flow>
    <flow name="PI_SIDECAR_CHECKED">
        <set-variable variableName="eventName" value="PI_SIDECAR_CHECKED" doc:name="Set eventName"/>
        <mulerequester:request resource="ftp://#[flowVars.input.username]:#[flowVars.input.password]@#[flowVars.input.server]/#[flowVars.files['sidecar'].file_path]/#[flowVars.files['sidecar'].file_name]?connector=FTP" throwExceptionOnTimeout="true" doc:name="Get XML file from FTP"/>
        <byte-array-to-object-transformer doc:name="Byte Array to Object"/>
        <set-variable variableName="incomingXml" value="#[payload]" doc:name="Set incomingXml"/>
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="#[flowVars.status]" doc:name="Set comment"/>
        <foreach collection="#[flowVars.files]" doc:name="For Each">
            <set-variable variableName="comment" value="#[flowVars.comment + &quot;\n&quot; + payload.file_path +  payload.file_name + &quot;, &quot; + payload.md5]" doc:name="Append file info to comment"/>
        </foreach>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <set-variable variableName="comment" value="#[&quot;Failed to read sidecar&quot;]" doc:name="Set comment (Failed to read sidecar)"/>
            <db:insert config-ref="POSTGRESQL_Connection" doc:name="Insert into sips table as NOK">
                <db:parameterized-query><![CDATA[INSERT INTO sips
(organisation, filename, filepath, host, comment, preingest_status)
VALUES (#[flowVars.cp], #[flowVars.filenameEssence], #[flowVars.filepath], #[flowVars.host], #[flowVars.comment], 'NOK')]]></db:parameterized-query>
            </db:insert>
            <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
            <validation:is-true config-ref="Validation_Configuration" expression="#[false]" doc:name="Throw exception so main flow stops"/>
        </catch-exception-strategy>
    </flow>
    <flow name="PI_SET_LOCAL_ID">
        <set-variable variableName="eventName" value="PI_SIDECAR_CHECKED" doc:name="Set eventName"/>
        <set-payload value="#[flowVars.incomingXml]" doc:name="Set Payload with sidecar"/>
        <choice doc:name="Which flow_id?">
            <when expression="#[flowVars.input.flow_id.equals(&quot;vrt.video.1&quot;)]">
                <logger message="local_id VRT" level="INFO" doc:name="VRT"/>
                <set-variable variableName="mediaId" value="#[xpath3(&quot;//mediaId/text()&quot;)]" doc:name="Set mediaId"/>
                <set-variable variableName="local_id" value="#[flowVars.mediaId]" doc:name="Set local_id equal to mediaId"/>
            </when>
            <when expression="#[flowVars.input.flow_id.equals(&quot;provant&quot;)]">
                <logger message="local_id VRT" level="INFO" doc:name="Provant"/>
                <set-variable variableName="local_id" value="#[xpath3(&quot;//custom_uuid/text()&quot;)]" doc:name="Set local_id from custom_uuid"/>
            </when>
            <otherwise>
                <logger message="Generic mapping from MHEM, dc_terms or ebu_core" level="INFO" doc:name="Generic mapping from MHEM, dc_terms or ebu_core"/>
                <set-variable variableName="local_id" value="#[xpath3(&quot;//dc_identifier_cpid/text()&quot;)]" doc:name="Set local_id from dc_identifier_cpid"/>
            </otherwise>
        </choice>
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="#[&quot;local_id = &quot; + flowVars.local_id]" doc:name="Set comment (local_id)"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </flow>
    <sub-flow name="PI_SET_MD5">
        <set-variable variableName="eventName" value="PI_MD5_CHECK" doc:name="Set Name"/>
        <set-variable variableName="md5metadata" value="#[xpath3('//md5/text()', flowVars.incomingXml)]" doc:name="Set md5metadata"/>
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
                <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <flow name="ADD_TO_SIPS">
    	<db:select config-ref="POSTGRESQL_Connection" doc:name="Check if a record with same local_id or filename+filepath combination or md5 already exists">
            <db:parameterized-query><![CDATA[select *
from sips
where organisation = #[flowVars.cp]
	and ((local_id = #[flowVars.local_id] and md5 is null)
		or (filename = #[flowVars.filename] and filepath = #[flowVars.filepath] and md5 is null)
		or md5 = #[flowVars.md5metadata]
	)]]></db:parameterized-query>
                        </db:select>
                        <choice doc:name="Found?">
                            <when expression="#[payload.size()&gt;0]">
                                <db:update config-ref="POSTGRESQL_Connection" doc:name="Update existing record">
                    <db:parameterized-query><![CDATA[update sips
set filename = #[flowVars.filenameEssence], host = #[flowVars.host], filepath = #[flowVars.filepath], 
	local_id = #[flowVars.local_id], md5 = #[flowVars.md5metadata], pid = #[flowVars.pid]
where id = #[payload[0].id]]]></db:parameterized-query>
                                </db:update>
                            </when>
                            <otherwise>
                                <db:insert config-ref="POSTGRESQL_Connection" doc:name="Insert new record into sips table">
                    <db:parameterized-query><![CDATA[INSERT INTO sips
(local_id, md5, organisation, pid, filename, filepath, host)
VALUES (#[flowVars.local_id], #[flowVars.md5metadata], #[flowVars.cp], #[flowVars.pid], #[flowVars.filenameEssence], #[flowVars.filepath], #[flowVars.host])]]></db:parameterized-query>
                                </db:insert>
                            </otherwise>
                        </choice>
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="#[&quot;Record updated/added to sips&quot;]" doc:name="Set comment"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </flow>
    <sub-flow name="CLEAR_VALUES">
        <remove-variable variableName="comment" doc:name="Clear Comment"/>
        <remove-variable variableName="result" doc:name="Clear result"/>
    </sub-flow>

</mule>