<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:mulerequester="http://www.mulesoft.org/schema/mule/mulerequester" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mulerequester http://www.mulesoft.org/schema/mule/mulerequester/current/mule-mulerequester.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
    <and-filter name="And" doc:name="And">
        <expression-filter expression="#[flowVars.comment = &quot;Metadata format was incorrect.&quot;]" nullReturnsTrue="true"/>
        <filter ref="Provant_Schema_Validation"/>
    </and-filter>
    <http:request-config name="vlaamsparlementportaal" host="ws.vlpar.be" port="80" basePath="/" doc:name="HTTP Request Configuration"/>
    <sub-flow name="PI_METADATA_MAPPING_MHEM">
        <set-variable variableName="eventName" value="PI_METADATA_MAPPING" doc:name="Set Name"/>
        <set-variable variableName="comment" value="#[flowVars.httpResult]" doc:name="Set Comment"/>
        <set-payload value="#[flowVars.incomingXml]" doc:name="Set Payload"/>
        <set-variable variableName="copy_xml" value="#[flowVars.incomingXml.substring(flowVars.incomingXml.indexOf('MediaHAVEN_external_metadata&gt;') + 30, flowVars.incomingXml.indexOf('&lt;/MediaHAVEN_external_metadata&gt;')-1)]" doc:name="Set copy_xml"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="dc_description" value="#[xpath3(&quot;//*[local-name() = 'dc_description']/text()&quot;)]" doc:name="Set dc_description"/>
        <set-variable variableName="dcterms_created" value="#[xpath3(&quot;//*[local-name() = 'dcterms_created']/text()&quot;)]" doc:name="Set dcterms_created"/>
        <set-variable variableName="CreationDate" value="#[flowVars.dcterms_created + &quot; 00:00:00&quot;]" doc:name="Set CreationDate from dcterms_created (from EDTF to EXIF)"/>
        <dw:transform-message metadata:id="d696f7ed-e9b9-4f34-8265-1191510a0be4" doc:name="Transform Message">
            <dw:input-payload doc:sample="sample_data/empty.xml"/>
            <dw:input-variable variableName="comment"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml skipNullOn="everywhere"
%function split(name) name splitBy ","
---
{
	MediaHAVEN_external_metadata: {
		title: flowVars.filenameWithoutExtension,
		description: flowVars.dc_description,
		MDProperties: {
			sp_name: 'borndigital',
			CP: flowVars.cp,
			CP_id: flowVars.cp_id,
			PID: flowVars.pid,
			CreationDate: flowVars.CreationDate,
			dc_source: flowVars.filenameEssence,
			// Default VIAA license?
			//dc_rights_licenses @(type: "list"): {
			//	(licentie: flowVars.license) when flowVars.license?
			//}
			(lookup('get_sidecar', flowVars.incomingXml))
		}
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="mappedXml" value="#[payload]" doc:name="Set mappedXml"/>
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="The input XML was mapped succesfully: #[payload]" doc:name="Set comment"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <sub-flow name="get_sidecar">
        <logger message="Start get_sidecar: #[payload]" level="INFO" doc:name="Start get_sidecar"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <logger message="After: #[payload]" level="INFO" doc:name="Logger"/>
    </sub-flow>
        <sub-flow name="PI_METADATA_MAPPING_VRT">
        <set-variable variableName="eventName" value="PI_METADATA_MAPPING" doc:name="Set Name"/>
        <set-variable variableName="comment" value="#[flowVars.httpResult]" doc:name="Set Comment"/>
        <set-payload value="#[flowVars.incomingXml]" doc:name="Set Payload"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <dw:transform-message doc:name="Transform Message" metadata:id="ef2d489e-12ad-4b91-8add-659011b32d9a">
            <dw:input-variable doc:sample="string_1.dwl" variableName="origin"/>
            <dw:input-variable doc:sample="string_2.dwl" variableName="mediaId"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
{
	MediaHAVEN_external_metadata: 
	{
		title: flowVars.pid ++ "-" ++ flowVars.local_id,
		MDProperties: {
			CP: p('cp'),
			CP_id: flowVars.cp_id,
			sp_name: 'dailies' when flowVars.origin != 'tape' otherwise 'intake_existing',
			PID: flowVars.pid,
			dc_identifier_localid: flowVars.local_id,
			(md5: flowVars.md5metadata) when flowVars.md5metadata?
		}
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="mappedXml" value="#[payload]" doc:name="Set mappedXml"/>
        <!--
        <message-filter throwOnUnaccepted="true" doc:name="Check output format">
            <and-filter>
                <expression-filter expression="#[flowVars.comment = &quot;Output format is incorrect.&quot;]"/>
            </and-filter>
        </message-filter>
        -->
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="The input XML was mapped succesfully: #[payload]" doc:name="Set comment"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <sub-flow name="PI_METADATA_MAPPING_PROVANT">
        <set-variable variableName="eventName" value="PI_METADATA_MAPPING" doc:name="Set Name"/>
        <set-variable variableName="comment" value="#[flowVars.httpResult]" doc:name="Set Comment"/>
        <set-payload value="#[flowVars.incomingXml]" doc:name="Set Payload"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="dc_publisher" value="#[xpath3(&quot;//*[local-name() = 'publisher']/text()&quot;)]" doc:name="Set dc_publisher"/>
        <choice doc:name="dc_publisher != null?">
            <when expression="#[flowVars.dc_publisher == null]">
                <validation:is-true config-ref="Validation_Configuration" expression="#[false]" doc:name="Throw exception because publisher is null"/>
            </when>
            <otherwise>
                <set-variable variableName="dc_publisher_lower" value="#[flowVars.dc_publisher.toLowerCase()]" doc:name="Set dc_publisher in lowercase"/>
                <choice doc:name="Set cp">
                    <when expression="flowVars.dc_publisher_lower.equals(&quot;fomu&quot;)">
                        <logger message="FoMu" level="INFO" doc:name="CP is FoMu"/>
                        <set-variable variableName="cp" value="#[&quot;FoMu&quot;]" doc:name="Set cp as FoMu"/>
                    </when>
                    <when expression="flowVars.dc_publisher_lower.equals(&quot;momu&quot;)">
                        <logger message="CP is MoMu" level="INFO" doc:name="CP is MoMu"/>
                        <set-variable variableName="cp" value="#[&quot;MoMu&quot;]" doc:name="Set cp as MoMu"/>
                    </when>
                    <when expression="flowVars.dc_publisher_lower.equals(&quot;museum voor edelsmeedkunst juwelen en diamant&quot;)">
                        <logger message="CP is Museum Edelsmeedkunst, Juwelen en Diamant" level="INFO" doc:name="CP is Museum Edelsmeedkunst, Juwelen en Diamant"/>
                        <set-variable variableName="cp" value="#[&quot;Museum Edelsmeedkunst, Juwelen en Diamant&quot;]" doc:name="Set cp as Museum Edelsmeedkunst, Juwelen en Diamant"/>
                    </when>
                    <otherwise>
                        <logger message="Unknown dc_publisher" level="WARN" doc:name="Unknown dc_publisher"/>
                        <set-variable variableName="cp" value="#[flowVars.cp]" doc:name="Set cp as provant"/>
                    </otherwise>
                </choice>
            </otherwise>
        </choice>
        <set-variable variableName="credits" value="#[xpath3(&quot;//*[local-name() = 'credit']/text()&quot;) == &quot;&quot; ? xpath3(&quot;//*[local-name() = 'Credit']/text()&quot;) : xpath3(&quot;//*[local-name() = 'credit']/text()&quot;)]" doc:name="Set credits"/>
        <set-variable variableName="relation" value="#[xpath3(&quot;//*[local-name() = 'relation']/text()&quot;)]" doc:name="Set relation (with a collection)"/>
        <set-variable variableName="relationDescription" value="#[xpath3(&quot;//*[local-name() = 'relation']/text()&quot;) != &quot;&quot; ? &quot;\nCollectie: &quot; + xpath3(&quot;//*[local-name() = 'relation']/text()&quot;) : &quot;&quot;]" doc:name="Set relationDescription"/>
        <set-variable variableName="description" value="#[xpath3(&quot;//*[local-name() = 'description']/text()&quot;) + flowVars.relationDescription]" doc:name="Set description"/>
        <set-variable variableName="title" value="#[xpath3(&quot;//*[local-name() = 'title']/text()&quot;) == &quot;&quot; ? xpath3(&quot;//*[local-name() = 'AOSourceInvNo']/text()&quot;) : xpath3(&quot;//*[local-name() = 'title']/text()&quot;) ]" doc:name="Set title"/>
        <set-variable variableName="termsAndConditionsText" value="#[xpath3(&quot;//*[local-name() = 'TermsAndConditionsText']/text()&quot;)]" doc:name="Set termsAndConditionsText"/>
        <choice doc:name="Which license?">
            <when expression="#[flowVars.termsAndConditionsText == &quot;Public domain&quot;]">
                <set-variable variableName="license" value="#[&quot;Publiek domein&quot;]" doc:name="Set license (Publiek domein)"/>
            </when>
            <when expression="#[flowVars.termsAndConditionsText == &quot;http://creativecommons.org/licenses/by/3.0/&quot;]">
                <set-variable variableName="license" value="#[&quot;CC BY&quot;]" doc:name="Set license (CC-BY)"/>
            </when>
            <when expression="#[flowVars.termsAndConditionsText == &quot;allRightsReserved&quot;]">
                <set-variable variableName="license" value="#[&quot;VIAA licentie&quot;]" doc:name="Set license (VIAA licentie)"/>
            </when>
            <otherwise>
                <expression-component doc:name="do nothing"><![CDATA[// do nothing]]></expression-component>
            </otherwise>
        </choice>
        <set-variable variableName="dctermsCreated" value="#[xpath3(&quot;//*[name()='dcterms:created']/text()&quot;)]" doc:name="Set dctermsCreated"/>
        <set-variable variableName="dateCreated" value="#[xpath3(&quot;//*[local-name() = 'date']/text()&quot;)]" doc:name="Set dateCreated"/>
        <set-variable variableName="CreationDate" value="#[flowVars.dctermsCreated != &quot;&quot; ? (flowVars.dctermsCreated + &quot; 00:00:00&quot;) : &quot;&quot;]" doc:name="Set CreationDate (MH)"/>
        <set-variable variableName="otherImageInfo" value="#[xpath3(&quot;//*[local-name() = 'OtherImageInfo']/text()&quot;)]" doc:name="Set otherImageInfo"/>
        <set-variable variableName="licenseHolder" value="#[xpath3(&quot;//*[local-name() = 'LicensorName']/text()&quot;)]" doc:name="Set licenseHolder"/>
        <choice doc:name="Set cp_id">
            <when expression="#[flowVars.cp == 'FoMu']">
                <set-variable variableName="cp_id" value="#['OR-pg1hn2h']" doc:name="Set cp_id for fomu"/>
            </when>
            <when expression="#[flowVars.cp == 'MoMu']">
                <set-variable variableName="cp_id" value="#['OR-td9n72t']" doc:name="Set cp_id for momu"/>
            </when>
            <when expression="#[flowVars.cp == 'Museum Edelsmeedkunst, Juwelen en Diamant']">
                <set-variable variableName="cp_id" value="#['OR-d21rh8x']" doc:name="Set cp_id for museumedelsmeedkunstjuwelenendiamant"/>
            </when>
            <otherwise>
                <validation:is-true config-ref="Validation_Configuration" expression="#[false]" doc:name="Throw exception because not valid cp"/>
            </otherwise>
        </choice>
        <dw:transform-message metadata:id="d696f7ed-e9b9-4f34-8265-1191510a0be4" doc:name="Transform Message">
            <dw:input-payload doc:sample="sample_data/empty.xml" />
            <dw:input-variable  variableName="comment"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml skipNullOn="everywhere"
%namespace ns0 http://www.jcp.org/jcr/1.0
%namespace ns6 http://purl.org/dc/elements/1.1/
%namespace ns11 http://www.day.com/jcr/cq/1.0
%namespace ns12 http://dublincore.org/documents/dcmi-terms/
%function split(name) name splitBy ","
%namespace ns4 http://iptc.org/std/Iptc4xmpExt/2008-02-29/
%namespace ns7 http://www.loc.gov/standards/premis/v2/premis.xsd
%namespace ns2 http://ns.useplus.org/ldf/xmp/1.0/
%namespace ns8 http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/
%namespace ns9 http://ns.adobe.com/photoshop/1.0/
---
{
	MediaHAVEN_external_metadata: {
		title: flowVars.title,
		description: flowVars.description,
		MDProperties: {
			sp_name: 'borndigital',
			CP: flowVars.cp,
			CP_id: flowVars.cp_id,
			PID: flowVars.pid,
			(CreationDate: flowVars.CreationDate) when flowVars.CreationDate != "",
			dc_title: flowVars.title,
			dc_titles @(type: "list"): {
				reeks: flowVars.relation
			},
			dc_source: flowVars.filenameEssence,
			dcterms_issued: flowVars.dctermsCreated,
			dcterms_created: flowVars.dctermsCreated,
			dc_rights_licenses @(type: "list"): {
				(licentie: flowVars.license) when flowVars.license?
			},
			dc_identifier_localid: payload.xml.ns0#content.metadata.custom_uuid when payload.xml.ns0#content.metadata.custom_uuid? otherwise "",
			dc_identifier_localids @(type: "list"): {
				(SourceInvNo: payload.xml.ns0#content.metadata.ns4#ArtworkOrObject."_x0031_".ns4#AOSourceInvNo) when payload.xml.ns0#content.metadata.ns4#ArtworkOrObject."_x0031_".ns4#AOSourceInvNo?,
				(SourceInvNo: payload.xml.ns0#content.metadata.ns4#ArtworkOrObject."_x0032_".ns4#AOSourceInvNo) when payload.xml.ns0#content.metadata.ns4#ArtworkOrObject."_x0032_".ns4#AOSourceInvNo?
			},
			dc_rights_rightsOwners @(type: "list"): {
				(rechtenhouder: payload.xml.ns0#content.metadata.ns2#CopyrightOwner."_x0031_".ns2#CopyrightOwnerName) when payload.xml.ns0#content.metadata.ns2#CopyrightOwner."_x0031_".ns2#CopyrightOwnerName?,
				(rechtenhouder: payload.xml.ns0#content.metadata.ns2#CopyrightOwner."_x0032_".ns2#CopyrightOwnerName) when payload.xml.ns0#content.metadata.ns2#CopyrightOwner."_x0032_".ns2#CopyrightOwnerName?
			},
			dc_rights_rightsHolders @(type: "list"): {
				(Licentiehouder: flowVars.licenseHolder) when flowVars.licenseHolder?
			},
			dc_contributors @(type: "list"): {
				(contributor: payload.xml.ns0#content.metadata.ns6#contributor) when payload.xml.ns0#content.metadata.ns6#contributor?	
			},
			dc_creators @(type: "list"): {
				(creator: payload.xml.ns0#content.metadata.ns6#creator) when payload.xml.ns0#content.metadata.ns6#creator?
			},
			(dc_subjects @(type: "list"): {
				(
					split(payload.xml.ns0#content.metadata.ns6#subject) map {
						trefwoord: $
					}
				)
			}) when payload.xml.ns0#content.metadata.ns6#subject?,
			dc_coverages @(type: "list"): {
				(split(payload.xml.ns0#content.metadata.ns8#Location)  map {
						ruimte: $
					}
				),
				(tijd: flowVars.dateCreated) when flowVars.dateCreated != ""
			} when payload.xml.ns0#content.metadata.ns8#Location?
			otherwise 
			{
				(tijd: flowVars.dateCreated) when flowVars.dateCreated != ""
			},	
			(dc_rights_credit: flowVars.credits) when flowVars.credits?,
			dc_description: flowVars.description,
			dc_publisher: flowVars.dc_publisher,
			dc_rights_comment: flowVars.termsAndConditionsText ++ "\n" ++ flowVars.otherImageInfo,
			(md5: flowVars.md5metadata) when flowVars.md5metadata != null
		}
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="comment" value="#[&quot;XML failed to validate against the XSD&quot;]" doc:name="Set comment"/>
       <!--  <message-filter throwOnUnaccepted="true" doc:name="Message">
            <filter ref="Provant_Schema_Validation"/>
        </message-filter> -->
        <!-- 
        <message-filter throwOnUnaccepted="true" doc:name="Message">
            <and-filter>
                <expression-filter expression="#[true]" nullReturnsTrue="true"/>
                <filter ref="Provant_Schema_Validation"/>
            </and-filter>
        </message-filter>
        -->
        <set-variable variableName="mappedXml" value="#[payload]" doc:name="Set MappedXml"/>
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="The input XML was mapped succesfully" doc:name="Set comment"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <sub-flow name="PI_METADATA_MAPPING_MEISE">
        <set-variable variableName="eventName" value="PI_METADATA_MAPPING" doc:name="Set Name"/>
        <set-variable variableName="comment" value="#[flowVars.httpResult]" doc:name="Set Comment"/>
        <set-payload value="#[flowVars.incomingXml]" doc:name="Set Payload"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <dw:transform-message metadata:id="d696f7ed-e9b9-4f34-8265-1191510a0be4" doc:name="Transform Message">
            <dw:input-payload doc:sample="content.xml"/>
            <dw:input-variable variableName="comment"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
{
	MediaHAVEN_external_metadata: payload.root.MediaHAVEN_external_metadata
}]]></dw:set-payload>
        </dw:transform-message>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="CP" value="#[xpath3(&quot;//CP/text()&quot;)]" doc:name="Set CP"/>
        <set-variable variableName="comment" value="The input XML was mapped succesfully: #[payload]" doc:name="Set comment"/>
        <set-variable variableName="mappedXml" value="#[payload]" doc:name="Set MappedXml"/>
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="The input XML was mapped succesfully: #[payload]" doc:name="Set comment"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <sub-flow name="PI_METADATA_MAPPING_VLAAMS_PARLEMENT">
        <set-variable variableName="eventName" value="PI_METADATA_MAPPING" doc:name="Set Name"/>
        <set-variable variableName="comment" value="#[flowVars.httpResult]" doc:name="Set Comment"/>
        <set-payload value="#[flowVars.incomingXml]" doc:name="Set Payload"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <http:request config-ref="vlaamsparlementportaal" path="#['/e/opendata/verg/' + flowVars.local_id]" method="GET" doc:name="Get metadata from open data portal">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
            </http:request-builder>
        </http:request>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <json:json-to-object-transformer  doc:name="JSON to Object"/>
        <set-variable variableName="datumBegin" value="#[payload.get(&quot;vergadering&quot;).get(&quot;datumbegin&quot;).toString().substring(1,20)]" doc:name="Set datumBegin"/>
        <set-variable variableName="dcterms_created" value="#[flowVars.datumBegin.substring(0,10)]" doc:name="Set dcterms_created (datumBegin as yyyy-mm-dd)"/>
        <set-variable variableName="CreationDate" value="#[flowVars.dcterms_created + &quot; 00:00:00&quot;]" doc:name="Set CreationDate (MH)"/>
        <expression-component doc:name="Set deel from filename"><![CDATA[#[flowVars.deel = flowVars.filenameEssence.replaceAll('^.*_dl([1-9]+)\\..*', '$1') != flowVars.filenameEssence ?  ("DEEL " + flowVars.filenameEssence.replaceAll('^.*_dl([1-9]+)\\..*', '$1') + " ") : "" ]]]></expression-component>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <set-variable variableName="dc_description_lang" value="#[&quot;&quot;]" doc:name="init dc_description_lang"/>
        <foreach collection="#[payload.get('vergadering').get('agenda-item')]" doc:name="For Each agenda-item">
            <set-variable variableName="titel" value="#[payload['agenda-lijn'][0].titel != null ? payload['agenda-lijn'][0].titel + &quot;\n&quot; : &quot;&quot;]" doc:name="Set titel"/>
            <set-variable variableName="omschrijving" value="#[payload['agenda-lijn'][0].omschrijving != null ? payload['agenda-lijn'][0].omschrijving + &quot;\n&quot; : &quot;&quot;]" doc:name="Set omschrijving"/>
            <set-variable variableName="vragenInterpellatie" value="#[payload['agenda-lijn'][0].vrageninterpellatie.size() &gt; 0 ? payload['agenda-lijn'][0].vrageninterpellatie[0].titel + &quot;\n&quot; : &quot;&quot;]" doc:name="Set vragenInterpellatie"/>
            <set-variable variableName="dc_description_lang" value="#[flowVars.dc_description_lang += &quot;Agenda-item &quot; + flowVars.counter + &quot;: &quot; + flowVars.titel + flowVars.omschrijving + flowVars.vragenInterpellatie + &quot;\n&quot;]" doc:name="Set dc_description_lang by concat"/>
        </foreach>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <dw:transform-message metadata:id="d696f7ed-e9b9-4f34-8265-1191510a0be4" doc:name="Transform Message">
            <dw:input-payload doc:sample="sample_data/json.json"/>
            <dw:input-variable variableName="comment"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
{
	MediaHAVEN_external_metadata: {
		title: payload.vergadering.commissie[0].titel ++ " " ++ flowVars.deel ++ flowVars.dcterms_created,
		description: flowVars.dc_description_lang ++ "\n\n" ++ 		
					"Voorzitter: " ++ payload.vergadering.voorzitter.voornaam ++ " " ++
							payload.vergadering.voorzitter.naam ++ " (" ++
							 payload.vergadering.voorzitter.fractie.naam ++ ")" ++ "\n\n" ++
					"Vergaderzaal: " ++ payload.vergadering.vergaderzaal.naam,
		MDProperties: {
			PID: flowVars.pid,
			CP: flowVars.cp,
			CP_id: 'OR-7h1dk9t',
			sp_name: 'borndigital',
			dc_source: flowVars.filenameEssence,
			dc_identifier_localid: flowVars.local_id,
			dc_identifier_localids @(type: "list"): {
				pdf: payload.vergadering.commissiehandelingen.pdffilewebpath
			},
			dc_titles @(type: "list"): {
				reeks: payload.vergadering.commissie[0].titel
			},
			CreationDate: flowVars.CreationDate,
			dcterms_issued: flowVars.datumBegin,
			dcterms_created: flowVars.dcterms_created,
			dc_contributors @(type: "list"): {
				bijdrager: payload.vergadering.voorzitter.voornaam ++ " " ++
							payload.vergadering.voorzitter.naam ++ " (" ++
							 payload.vergadering.voorzitter.fractie.naam ++ ")",
				(payload.vergadering.aanwezigheid[0].persoon map {
					bijdrager: ($.voornaam ++ " " ++ $.naam ++ " (" ++ $.fractie.naam ++ ") ")
					}
				)
			},
			dc_description_lang: flowVars.dc_description_lang,
			dc_rights_licenses @(type: "list"): {
				licentie: "CCBY"
			},
			dc_rights_rightsOwners @(type: "list"): {
				auteursrechthouder: "Vlaams Parlement"
			},
			dc_rights_rightsHolders @(type: "list"): {
				licentiehouder: "Vlaams Parlement"
			},
			md5: flowVars.md5metadata			
		}
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="mappedXml" value="#[payload]" doc:name="Set MappedXml"/>
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="The input XML was mapped succesfully: #[payload]" doc:name="Set comment"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>

</mule>
