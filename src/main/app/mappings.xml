<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:mulerequester="http://www.mulesoft.org/schema/mule/mulerequester" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mulerequester http://www.mulesoft.org/schema/mule/mulerequester/current/mule-mulerequester.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
    <http:request-config name="vlaamsparlement_api" host="ws.vlpar.be" port="80" basePath="/" doc:name="HTTP Request Configuration" responseTimeout="20000">
        <http:proxy host="proxy.do.viaa.be" port="80"/>
    </http:request-config>
    <http:request-config name="edtf_validator" host="${edtfLocal.host}" port="80"  doc:name="HTTP Request Configuration" responseTimeout="20000">
        <http:proxy host="proxy.do.viaa.be" port="80"/>
    </http:request-config>
    <sub-flow name="PI_METADATA_MAPPING_MHEM">
        <set-variable variableName="eventName" value="PI_METADATA_MAPPING" doc:name="Set Name"/>
        <set-variable variableName="comment" value="#[flowVars.httpResult]" doc:name="Set Comment"/>
        <set-payload value="#[flowVars.incomingXml]" doc:name="Set Payload with incomingXml"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="CreationDate" value="#[xpath3(&quot;//*[local-name() = 'dcterms_issued']/text()&quot;) != &quot;&quot; ? (xpath3(&quot;//*[local-name() = 'dcterms_issued']/text()&quot;).replaceAll('-', ':').substring(0,10) + &quot; 00:00:00&quot;) : null]" doc:name="Set CreationDate from dcterms_issued (from EDTF to EXIF)"/>
        <dw:transform-message metadata:id="d696f7ed-e9b9-4f34-8265-1191510a0be4" doc:name="Transform Message">
            <dw:input-payload doc:sample="sample_data/empty.xml"/>
            <dw:input-variable variableName="comment"/>
            <dw:input-variable doc:sample="sample_data/string.dwl" variableName="CreationDate"/>
            <dw:input-variable doc:sample="sample_data/string_1.dwl" mimeType="application/java" variableName="filenameEssence"/>
            <dw:input-variable doc:sample="sample_data/list_string.dwl" mimeType="application/java" variableName="pid_collateral"/>
            <dw:input-variable doc:sample="sample_data/map.dwl" variableName="cp"/>
            <dw:input-variable doc:sample="sample_data/map_1.dwl" variableName="pid"/>
            <dw:input-variable doc:sample="sample_data/MyPojo.dwl" variableName="cp_id"/>
            <dw:input-variable doc:sample="/Users/dieter/VIAA/borndigital/src/test/resources/sample_data/list_String.dwl" mimeType="application/java" variableName="collaterals"/>
            <dw:set-payload><![CDATA[%dw 1.0
%input payload application/xml
%output application/xml skipNullOn="everywhere"
%function split(name) name splitBy ","
---
{
	MediaHAVEN_external_metadata: {
		title: payload.VIAA.dc_title when (payload.VIAA.dc_title? and ((trim payload.VIAA.dc_title) != ""))
			otherwise (payload.VIAA.dc_titles[0] when (payload.VIAA.dc_titles? and payload.VIAA.dc_titles[0]? and ((trim payload.VIAA.dc_titles[0]) != ""))
			otherwise (payload.VIAA.dc_description_short when payload.VIAA.dc_description_short? and ((trim payload.VIAA.dc_description_short) != "")
			otherwise flowVars.pid)),
		description: payload.VIAA.dc_description when payload.VIAA.dc_description? 
					otherwise (payload.VIAA.dc_description_short when payload.VIAA.dc_description_short?
					otherwise ""),
		MDProperties: {
			(payload.*VIAA map (
				$ mapObject {
					'$$': $ when ('$$' != 'dc_relations' and '$$' != 'CP_id') otherwise null
				}
			)),
			(sp_name: 'borndigital') when payload.VIAA.sp_name == null,
			(CP: flowVars.cp) when payload.VIAA.CP == null,
			CP_id: flowVars.cp_id,
			PID: flowVars.pid,
			dc_relations @(type: "list"): {
				(flowVars.collaterals default [] map (bevat: $)),
				((payload.VIAA.dc_relations mapObject ('$$': $)) when payload.VIAA.dc_relations? and (sizeOf payload.VIAA.dc_relations) > 0 and not payload.VIAA.dc_relations is :string otherwise {})
			},
			(CreationDate: flowVars.CreationDate) when flowVars.CreationDate != null,
			(dc_source: flowVars.filenameEssence) when payload.VIAA.dc_source == null
			// Default VIAA license?
			//dc_rights_licenses @(type: "list"): {
			//	(licentie: flowVars.license) when flowVars.license?
			//}
		}
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="mappedXml" value="#[payload]" doc:name="Set mappedXml"/>
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="The input XML was mapped succesfully: #[payload]" doc:name="Set comment"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <flow name="get_sidecar">
        <logger message="Start get_sidecar: #[payload]" level="INFO" doc:name="Start get_sidecar"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <logger message="After: #[payload]" level="INFO" doc:name="Logger"/>
    </flow>
        <sub-flow name="PI_METADATA_MAPPING_VRT">
        <set-variable variableName="eventName" value="PI_METADATA_MAPPING" doc:name="Set Name"/>
        <set-variable variableName="comment" value="#[flowVars.httpResult]" doc:name="Set Comment"/>
        <set-payload value="#[flowVars.incomingXml]" doc:name="Set Payload"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <dw:transform-message doc:name="Transform Message" metadata:id="ef2d489e-12ad-4b91-8add-659011b32d9a">
            <dw:input-variable doc:sample="string_1.dwl" variableName="origin"/>
            <dw:input-variable doc:sample="string_2.dwl" variableName="mediaId"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
{
	MediaHAVEN_external_metadata: 
	{
		title: flowVars.pid ++ "-" ++ flowVars.local_id,
		MDProperties: {
			CP: p('cp'),
			CP_id: flowVars.cp_id,
			sp_name: 'dailies' when flowVars.origin != 'tape' otherwise 'intake_existing',
			PID: flowVars.pid,
			dc_identifier_localid: flowVars.local_id,
			(md5: flowVars.md5metadata) when flowVars.md5metadata?
		}
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="mappedXml" value="#[payload]" doc:name="Set mappedXml"/>
        <!--
        <message-filter throwOnUnaccepted="true" doc:name="Check output format">
            <and-filter>
                <expression-filter expression="#[flowVars.comment = &quot;Output format is incorrect.&quot;]"/>
            </and-filter>
        </message-filter>
        -->
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="The input XML was mapped succesfully: #[payload]" doc:name="Set comment"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
    <sub-flow name="metadata_corrections">
        <set-variable variableName="mappedXml" value="#[flowVars.mappedXml.replaceAll('&lt;trefwoord&gt;', '&lt;Trefwoord&gt;').replaceAll('&lt;/trefwoord&gt;', '&lt;/Trefwoord&gt;')]" doc:name="Fix trefwoord -&gt; Trefwoord"/>
        <set-variable variableName="mappedXml" value="#[flowVars.mappedXml.replaceAll('&lt;auteursrechthouder&gt;', '&lt;Auteursrechthouder&gt;').replaceAll('&lt;/auteursrechthouder&gt;','&lt;/Auteursrechthouder&gt;')]" doc:name="Fix auteursrechthouder -&gt; Auteursrechthouder"/>
        <set-variable variableName="mappedXml" value="#[flowVars.mappedXml.replaceAll('&lt;licentiehouder&gt;', '&lt;Licentiehouder&gt;').replaceAll('&lt;/licentiehouder&gt;','&lt;/Licentiehouder&gt;')]" doc:name="Fix licentiehouder -&gt; Licentiehouder"/>
        <choice doc:name="Languages available?">
            <when expression="#[flowVars.mappedXml.indexOf('&lt;dc_languages type=&quot;list&quot;&gt;') == -1]">
                <logger message="No language metadata available" level="INFO" doc:name="No language metadata available"/>
            </when>
            <otherwise>
                <set-variable variableName="languages" value="#[flowVars.mappedXml.substring(flowVars.mappedXml.indexOf('&lt;dc_languages type=&quot;list&quot;&gt;'), flowVars.mappedXml.indexOf('&lt;/dc_languages&gt;'))]" doc:name="Set languages"/>
                <set-variable variableName="mappedXml" value="#[flowVars.mappedXml.replace(flowVars.languages, flowVars.languages.toLowerCase())]" doc:name="Fix languages to lowercase"/>
            </otherwise>
        </choice>
    </sub-flow>
    <flow name="validateMetadataFromVIAAtoMAM" >
        <set-variable variableName="eventName" value="PI_VALIDATE_METADATA_VIAA_MAM" doc:name="Set eventName"/>
        <set-payload value="#[flowVars.mappedXml]" doc:name="Set Payload with mappedXml"/>
        
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML" />
        <message-filter onUnaccepted="error_invalid_data" doc:name="Validate mappedXml" >
            <mulexml:schema-validation-filter schemaLocations="viaa_metadatamodel_van_viaa_naar_mam.xsd" returnResult="false" name="VIAA_MAM_Schema_Validation"
        doc:name="Schema Validation" />
        </message-filter>
        <logger message="FILE OK: #[message.payload]" level="DEBUG" doc:name="Logger" />
        <set-variable variableName="result" value="OK" doc:name="Set result OK"/>
        <set-variable variableName="comment" value="The mapped XML is valid." doc:name="Set comment"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </flow>
 
    <flow name="error_invalid_data" >
        <logger message="ERROR: MESSAGE PAYLOAD: #[message.payload]" level="DEBUG" doc:name="Logger" />
        <set-variable variableName="result" value="NOK" doc:name="Set result NOK"/>
        <set-variable variableName="comment" value="The mapped XML is NOT valid." doc:name="Set comment"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </flow>
    <sub-flow name="validateEDTFdates">
        <set-variable variableName="eventName" value="#['PI_VALIDATE_DATE']" doc:name="Set eventName"/>
        <set-variable variableName="dcterms_issued" value="#[xpath3(&quot;//dcterms_issued/text()&quot;, flowVars.mappedXml)]" doc:name="Get dcterms_issued"/>
        <set-variable variableName="dcterms_created" value="#[xpath3(&quot;//dcterms_created/text()&quot;, flowVars.mappedXml)]" doc:name="Get dcterms_created"/>
        <choice doc:name="When dcterms_created is empty">
            <when expression="#[flowVars.dcterms_created == &quot;&quot;]">
                <set-variable variableName="dcterms_created_is_valid" value="#[true]" doc:name="dcterms_created_is_valid is true"/>
            </when>
            <otherwise>
                <set-payload value="#[flowVars.dcterms_created]" doc:name="Set Payload"/>
                    <flow-ref name="date_validator" doc:name="date_validator Flow Reference"/>
                <set-variable variableName="dcterms_created_is_valid" value="#[payload]" doc:name="Set dcterms_created_is_valid"/>
            </otherwise>
        </choice>
        <choice doc:name="When dcterms_issued is empty">
            <when expression="#[flowVars.dcterms_issued == &quot;&quot;]">
                <set-variable variableName="dcterms_issued_is_valid" value="#[true]" doc:name="Set dcterms_issued_is_valid is true"/>
            </when>
            <otherwise>
                <set-payload value="#[flowVars.dcterms_issued]" doc:name="Set Payload"/>
                <flow-ref name="date_validator" doc:name="date_validator Flow Reference"/>
                <set-variable variableName="dcterms_issued_is_valid" value="#[payload]" doc:name="Set dcterms_issued_is_valid"/>
            </otherwise>
        </choice>
        <set-variable variableName="result" value="#[flowVars.dcterms_issued_is_valid &amp;&amp; flowVars.dcterms_created_is_valid ? &quot;OK&quot; : &quot;NOK&quot;]" doc:name="Set result OK when dcterms_issued and created are valid"/>
        <set-variable variableName="comment" value="dcterms_created and issued are #[flowVars.result]" doc:name="Set comment"/>
        <flow-ref name="PI_LOG" doc:name="PI_LOG"/>
    </sub-flow>
</mule>
