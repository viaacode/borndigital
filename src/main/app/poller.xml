<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd">
    <quartz:connector name="Quartz" validateConnections="true" doc:name="Quartz"/>
    <flow name="paullerFlow" processingStrategy="synchronous">
        <amqp:inbound-endpoint queueName="borndigital_poller_token" responseTimeout="10000" exchange-pattern="request-response" connector-ref="RabbitMQConnectorPoller" doc:name="Receive from borndigital_poller_token" numberOfChannels="1">
            <reconnect/>
        </amqp:inbound-endpoint>
        <db:select config-ref="borndigital" doc:name="Fetch records with preingest_status not null and archive_status null">
            <db:parameterized-query><![CDATA[select *
from sips
WHERE preingest_status is not null and archive_status is null
order by last_event_date desc]]></db:parameterized-query>
        </db:select>
        <logger message="What is process_status" level="INFO" doc:name="Logger"/>
        <foreach doc:name="For Each">
            <choice doc:name="Is preingest_status OK or NOK?">
                <when expression="#[payload.preingest_status.equals('OK')]">
                    <set-session-variable variableName="file" value="#[payload]" doc:name="Set file"/>
                    <db:select config-ref="mediahaven" doc:name="Check pid with Mediahaven monitoring">
                        <db:parameterized-query><![CDATA[select *
from sips
where external_id = #[payload.pid]]]></db:parameterized-query>
                    </db:select>
                    <logger message="preingest_status OK" level="INFO" doc:name="preingest_status OK"/>
                    <choice doc:name="Pid found in MH?">
                        <when expression="#[payload.size()==0]">
                            <logger message="Pid not found, do nothing" level="INFO" doc:name="Pid not found, do nothing"/>
                        </when>
                        <otherwise>
                            <set-session-variable variableName="mh_result" value="#[payload[0]]" doc:name="Set mh_result"/>
                            <set-variable variableName="fragment_id" value="#[sessionVars.mh_result.fragment_id]" doc:name="Set fragment_id"/>
                            <choice doc:name="Mediahaven status?">
                                <when expression="#[sessionVars.mh_result.archive_status.equals('on_tape')]">
                                    <logger message="Ingest date: #[sessionVars.ingest_date]" level="INFO" doc:name="Logger"/>
                                    <db:update config-ref="borndigital" doc:name="Set archive_status OK, fragment_id">
                                        <db:parameterized-query><![CDATA[update sips
set archive_status = 'OK', fragment_id = #[flowVars.fragment_id], comment = 'File is correct gearchiveerd'
where id = #[sessionVars.file.id]]]></db:parameterized-query>
                                    </db:update>
                                    <logger level="INFO" doc:name="TODO: delete file from source"/>
                                </when>
                                <otherwise>
                                    <logger message="mediahaven status = NULL ('file wordt nog verwerkt')" level="INFO" doc:name="NULL, do nothing"/>
                                    <choice doc:name="Fragment_id filled in?">
                                        <when expression="#[flowVars.file.fragment_id == &quot;&quot; || flowVars.file.fragment_id == null]">
                                            <db:update config-ref="borndigital" doc:name="Update fragment_id">
                                                <db:parameterized-query><![CDATA[update sips
set fragment_id = #[flowVars.fragment_id]
where id = #[flowVars.file.id]]]></db:parameterized-query>
                                            </db:update>
                                        </when>
                                        <otherwise>
                                            <expression-component doc:name="Do nothing"><![CDATA[// do nothing]]></expression-component>
                                        </otherwise>
                                    </choice>
                                </otherwise>
                            </choice>
                        </otherwise>
                    </choice>
                </when>
                <otherwise>
                    <db:update config-ref="borndigital" doc:name="Update with archive_status NOK">
                        <db:parameterized-query><![CDATA[update sips
set archive_status = 'NOK', comment = 'Preingest failed.'
where id = #[payload.id]]]></db:parameterized-query>
                    </db:update>
                </otherwise>
            </choice>
        </foreach>
        <expression-component doc:name="Sleep"><![CDATA[Thread.sleep(30000);]]></expression-component>
        <amqp:outbound-endpoint queueName="borndigital_poller_token" responseTimeout="10000" exchange-pattern="request-response" connector-ref="RabbitMQConnectorPoller" doc:name="Send to meise_poller">
            <reconnect/>
        </amqp:outbound-endpoint>
        <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="Catch error" level="INFO" doc:name="Catch"/>
        </catch-exception-strategy>
    </flow>
    <flow name="Redo" processingStrategy="synchronous">
        <quartz:inbound-endpoint jobName="redo" repeatInterval="1800000" startDelay="7000" connector-ref="Quartz" responseTimeout="10000" doc:name="Quartz">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <db:select config-ref="borndigital" doc:name="Records with last_modified &gt; 48 hours and no archive_status are disappeared">
            <db:parameterized-query><![CDATA[select *
from sips
WHERE preingest_status != 'OK' and archive_status is null and (last_event_date > (now() - interval '72 hours'))
LIMIT 100;]]></db:parameterized-query>
        </db:select>
        <foreach doc:name="For Each">
            <logger level="INFO" doc:name="Redo ++"/>
            <logger level="INFO" doc:name="Check  Rabbit queue size"/>
            <logger level="INFO" doc:name="Check in MH ingested"/>
            <logger level="INFO" doc:name="MH has manual to correct files (metadata tiff)?"/>
        </foreach>
    </flow>
</mule>