<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
    <quartz:connector name="Quartz" validateConnections="true" doc:name="Quartz"/>
    <flow name="Redo" processingStrategy="synchronous" initialState="stopped">
        <quartz:inbound-endpoint jobName="redo" repeatInterval="1800000" startDelay="0" connector-ref="Quartz" responseTimeout="10000" doc:name="Quartz">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <db:select config-ref="borndigital" doc:name="Fetch borndigital_ingest_choistatus">
            <db:parameterized-query><![CDATA[select *
from borndigital_ingest_status]]></db:parameterized-query>
        </db:select>
        <choice doc:name="When NOK, don't retry">
            <when expression="#[payload[0].status == 'NOK']">
                <expression-component doc:name="Expression"><![CDATA[// do nothing]]></expression-component>
            </when>
            <otherwise>
                <set-variable variableName="MAX_RETRIES" value="#[3]" doc:name="Set MAX_RETRIES (3)"/>
                <db:select config-ref="borndigital" doc:name="Retry records that have (archive_status !OK AND aren't modified for X hours AND has retry_count &lt; 3) OR have preingest_status TODO (for manual retry)">
                    <db:parameterized-query><![CDATA[SELECT *
FROM sips
WHERE ((archive_status = 'in_progress'
        AND (last_event_date < (now() - interval '100 hours')))
       OR preingest_status = 'TODO')
  AND message IS NOT NULL
  AND is_deleted IS FALSE;]]></db:parameterized-query>
                </db:select>
                <foreach doc:name="For Each">
                    <choice doc:name="Amount of retries &lt; MAX_RETRIES?">
                        <when expression="#[payload.retry_count &lt; flowVars.MAX_RETRIES]">
                            <logger message="[#[message.id]] Retrying #[payload.id] with pid #[payload.pid]" level="INFO" doc:name="Retry"/>
                            <flow-ref name="retry" doc:name="retry"/>
                        </when>
                        <otherwise>
                            <logger message="[#[message.id]] Max amount of retries reached. Set archive_status NOK" level="INFO" doc:name="Max amount of retries reached. Set archive_status NOK"/>
                            <db:update config-ref="borndigital" doc:name="Set archive_status NOK, preingest_status NOK">
                                <db:parameterized-query><![CDATA[update sips
set archive_status = 'NOK', comment = 'Ingest failed.', preingest_status = 'NOK'
where id = #[payload.id]]]></db:parameterized-query>
                            </db:update>
                        </otherwise>
                    </choice>
                </foreach>
            </otherwise>
        </choice>
    </flow>
    <flow name="retry" initialState="stopped">
        <set-variable variableName="retry_count" value="#[payload.retry_count+1]" doc:name="Set retry_count++"/>
        <set-variable variableName="message" value="#[payload.message]" doc:name="Set message"/>
        <db:update config-ref="borndigital" doc:name="update retry_count">
            <db:parameterized-query><![CDATA[update sips
set retry_count = #[flowVars.retry_count], archive_status = 'in_progress'
where id = #[payload.id]]]></db:parameterized-query>
        </db:update>
        <set-payload value="#[flowVars.message]" doc:name="Set Payload with message"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <set-variable variableName="input" value="#[payload]" doc:name="Set input"/>
        <set-variable variableName="cp" value="#[flowVars.input.cp_name]" doc:name="Set cp"/>
        <component class="utils.Utils" doc:name="Extract files"/>
        <set-variable variableName="files" value="#[payload]" doc:name="Set files (with message metadata)"/>
        <set-variable variableName="filenameWithoutExtension" value="#[flowVars.input.get('sip_package')[0].file_name.substring(0, flowVars.input.get('sip_package')[0].file_name.lastIndexOf('.'))]" doc:name="Set filenameWithoutExtension"/>
        <set-variable variableName="extension" value="#[flowVars.files.essence[0].file_name.split(&quot;\\.(?=[^\\.]+$)&quot;).size() == 2 ? flowVars.files.essence[0].file_name.split(&quot;\\.(?=[^\\.]+$)&quot;)[1] : &quot;&quot;]" doc:name="Set extension"/>
        <set-payload value="#[flowVars.input]" doc:name="Set Payload with original input"/>
        <flow-ref name="init_variables" doc:name="init_variables"/>
        <flow-ref name="init_info" doc:name="init_info"/>
        <flow-ref name="PI_SET_PID" doc:name="PI_SET_PID"/>
        <flow-ref name="ingestByMessage" doc:name="ingestByMessage"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="[#[message.id]] Failed to retry for id #[flowVars.id] and filename #[flowVars.filenameWithoutExtension]" level="INFO" doc:name="Failed to retry"/>
        </catch-exception-strategy>
    </flow>
</mule>
