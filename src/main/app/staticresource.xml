<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <flow name="static_resources">
        <http:listener config-ref="MonitoringListener" path="/*" allowedMethods="GET" doc:name="HTTP"/>
        <http:static-resource-handler resourceBase="${app.home}/docroot" doc:name="HTTP Static Resource Handler"/>
        <exception-strategy ref="Ignore_Errors" doc:name="Reference Exception Strategy"/>
    </flow>
    <catch-exception-strategy name="Ignore_Errors">
        <logger message="Unknown Exception in staticresource.xml" level="INFO" doc:name="Logger"/>
    </catch-exception-strategy>
    <flow name="pid">
        <http:listener config-ref="MonitoringListener" path="/pid" allowedMethods="GET" doc:name="HTTP"/>
        <db:select config-ref="POSTGRESQL_Connection" doc:name="Database">
            <db:parameterized-query><![CDATA[SELECT * FROM ${db.eventstable} WHERE pid = #[message.inboundProperties.'http.query.params'.pid] LIMIT 50;]]></db:parameterized-query>
        </db:select>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <exception-strategy ref="Ignore_Errors" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="count">
        <http:listener config-ref="MonitoringListener" path="/count" allowedMethods="GET" doc:name="HTTP"/>
        <db:select config-ref="POSTGRESQL_Connection" doc:name="Database">
            <db:parameterized-query><![CDATA[SELECT count(*) FROM ${db.eventstable} WHERE name = 'PI_SIP_DELIVERY';]]></db:parameterized-query>
        </db:select>
        <set-payload value="#[payload[0]]" doc:name="Set Payload"/>
        <json:object-to-json-transformer doc:name="Copy_of_Object to JSON"/>
        <exception-strategy ref="Ignore_Errors" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="paginated">
        <http:listener config-ref="MonitoringListener" path="/getpids" doc:name="HTTP"/>
        <set-variable variableName="startIndex" value="#[message.inboundProperties.'http.query.params'.start]" doc:name="Copy_of_Set startIndex"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.startIndex != null &amp;&amp; !flowVars.startIndex.equals(&quot;&quot;) &amp;&amp; !flowVars.startIndex.equals(&quot;NaN&quot;)]">
                <db:select config-ref="POSTGRESQL_Connection" doc:name="Select_Paginated">
                    <db:parameterized-query><![CDATA[SELECT pid, date, cp, outcome FROM ${db.eventstable} WHERE name = 'PI_SIP_DELIVERY' ORDER BY date DESC OFFSET #[flowVars.startIndex] LIMIT 25;]]></db:parameterized-query>
                </db:select>
            </when>
            <otherwise>
                <db:select config-ref="POSTGRESQL_Connection" doc:name="Database">
                    <db:parameterized-query><![CDATA[SELECT pid, date, cp, outcome FROM ${db.eventstable} WHERE name = 'PI_SIP_DELIVERY' ORDER BY date DESC LIMIT 25;]]></db:parameterized-query>
                </db:select>
            </otherwise>
        </choice>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <exception-strategy ref="Ignore_Errors" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="query">
        <http:listener config-ref="MonitoringListener" path="/search" allowedMethods="GET" doc:name="HTTP"/>
        <set-variable variableName="tempStartIndex" value="#[message.inboundProperties.'http.query.params'.start]" doc:name="Set tempStartIndex"/>
        <set-variable variableName="fromDate" value="#[message.inboundProperties.'http.query.params'.fromDate == null ? &quot;&quot; : message.inboundProperties.'http.query.params'.fromDate]" doc:name="Set fromDate"/>
        <set-variable variableName="toDate" value="#[message.inboundProperties.'http.query.params'.toDate == null ? &quot;&quot; : message.inboundProperties.'http.query.params'.toDate]" doc:name="Set toDate"/>
        <set-variable variableName="startIndex" value="#[(flowVars.tempStartIndex == null || flowVars.tempStartIndex.equals(&quot;&quot;)) ? &quot;&quot; : flowVars.tempStartIndex]" doc:name="Set startIndex"/>
        <logger message="#[&quot;StartIndex = &quot; + flowVars.startIndex]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="pid" value="#[message.inboundProperties.'http.query.params'.pid == null ? &quot;&quot; : message.inboundProperties.'http.query.params'.pid]" doc:name="Set pid"/>
        <set-variable variableName="tempOutcome" value="#[message.inboundProperties.'http.query.params'.outcome]" doc:name="Set tempOutcome"/>
        <set-variable variableName="outcome" value="#[flowVars.tempOutcome == null ? &quot;&quot; : flowVars.tempOutcome.equals(&quot;OK&quot;) ? &quot;OK&quot; : flowVars.tempOutcome.equals(&quot;NOK&quot;) ? &quot;NOK&quot; : &quot;&quot;]" doc:name="Set outcome"/>
        <set-variable variableName="date" value="#[message.inboundProperties.'http.query.params'.date]" doc:name="Set date"/>
        <set-variable variableName="cp" value="#[message.inboundProperties.'http.query.params'.cp == null ? &quot;&quot; : message.inboundProperties.'http.query.params'.cp]" doc:name="Set cp"/>
        <set-variable variableName="orderByField" value="#[message.inboundProperties.'http.query.params'.orderByField == null ? &quot;date&quot; : message.inboundProperties.'http.query.params'.orderByField]" doc:name="Set orderByField"/>
        <set-variable variableName="reverseSort" value="#[message.inboundProperties.'http.query.params'.reverseSort]" doc:name="Set reverseSort"/>
        <db:select config-ref="POSTGRESQL_Connection" doc:name="Database">
            <db:dynamic-query><![CDATA[SELECT COUNT(*)
FROM #['${db.eventstable}'] WHERE name = 'PI_SIP_DELIVERY'#[flowVars.pid.equals("") ? "" : " AND pid LIKE('%" + flowVars.pid + "%')"]#[flowVars.outcome.equals("") ? "" : " AND outcome = '" + flowVars.outcome + "'"]#[flowVars.cp.equals("") ? "" : " AND cp LIKE('%" + flowVars.cp + "%')"]#[flowVars.fromDate.equals("") ? "" : (" AND date >= '" + flowVars.fromDate + "'")]#[flowVars.toDate.equals("") ? "" : " AND date <= '" + flowVars.toDate + "'"]
GROUP BY pid, date, cp, outcome
ORDER BY #[flowVars.orderByField.equals("") ? "date" : flowVars.orderByField] #[flowVars.reverseSort == true ? "ASC" : "DESC"];]]></db:dynamic-query>
        </db:select>
        <set-variable variableName="count" value="#[payload.size()]" doc:name="Set count"/>
        <logger message="SELECT pid, date, cp, outcome FROM #['${db.eventstable}'] WHERE name = 'PI_SIP_DELIVERY'#[flowVars.pid.equals(&quot;&quot;) ? &quot;&quot; : &quot; AND pid LIKE('%&quot; + flowVars.pid + &quot;%')&quot;]#[flowVars.outcome.equals(&quot;&quot;) ? &quot;&quot; : &quot; AND outcome = '&quot; + flowVars.outcome + &quot;'&quot;]#[flowVars.cp.equals(&quot;&quot;) ? &quot;&quot; : &quot; AND cp LIKE('%&quot; + flowVars.cp + &quot;%')&quot;]#[flowVars.fromDate.equals(&quot;&quot;) ? &quot;&quot; : (&quot; AND date &gt;= '&quot; + flowVars.fromDate + &quot;'&quot;)]#[flowVars.toDate.equals(&quot;&quot;) ? &quot;&quot; : &quot; AND date &lt;= '&quot; + flowVars.toDate + &quot;'&quot;] ORDER BY #[flowVars.orderByField.equals(&quot;&quot;) ? &quot;date&quot; : flowVars.orderByField] #[flowVars.reverseSort == true ? &quot;ASC&quot; : &quot;DESC&quot;] #[flowVars.startIndex.equals(&quot;&quot;) ? &quot;OFFSET 0&quot; : &quot;OFFSET &quot; + flowVars.startIndex] LIMIT 20;" level="INFO" doc:name="Logger"/>
        <db:select config-ref="POSTGRESQL_Connection" doc:name="Query">
            <db:dynamic-query><![CDATA[SELECT pid, date, cp, outcome
FROM #['${db.eventstable}'] WHERE name = 'PI_SIP_DELIVERY'#[flowVars.pid.equals("") ? "" : " AND pid LIKE('%" + flowVars.pid + "%')"]#[flowVars.outcome.equals("") ? "" : " AND outcome = '" + flowVars.outcome + "'"]#[flowVars.cp.equals("") ? "" : " AND cp LIKE('%" + flowVars.cp + "%')"]#[flowVars.fromDate.equals("") ? "" : (" AND date >= '" + flowVars.fromDate + "'")]#[flowVars.toDate.equals("") ? "" : " AND date <= '" + flowVars.toDate + "'"]
ORDER BY #[flowVars.orderByField.equals("") ? "date" : flowVars.orderByField] #[flowVars.reverseSort == true ? "ASC" : "DESC"]
#[flowVars.startIndex.equals("") ? "OFFSET 0" : "OFFSET " + flowVars.startIndex]
LIMIT 20;]]></db:dynamic-query>
        </db:select>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	totalCount: flowVars.count,
	data: payload
}]]></dw:set-payload>
        </dw:transform-message>
        <exception-strategy ref="Ignore_Errors" doc:name="Reference Exception Strategy"/>
    </flow>
</mule>
